<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://ouluqiang.github.io/</id>
    <title>小白记忆屋</title>
    <updated>2019-10-15T09:13:21.125Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://ouluqiang.github.io/"/>
    <link rel="self" href="https://ouluqiang.github.io//atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://ouluqiang.github.io//images/avatar.png</logo>
    <icon>https://ouluqiang.github.io//favicon.ico</icon>
    <rights>All rights reserved 2019, 小白记忆屋</rights>
    <entry>
        <title type="html"><![CDATA[[转载] 2. Jetpack源码解析---Navigation为什么切换Fragment会重绘？]]></title>
        <id>https://ouluqiang.github.io//post/zhuan-zai-2-jetpack-yuan-ma-jie-xi-navigation-wei-shi-me-qie-huan-fragment-hui-chong-hui</id>
        <link href="https://ouluqiang.github.io//post/zhuan-zai-2-jetpack-yuan-ma-jie-xi-navigation-wei-shi-me-qie-huan-fragment-hui-chong-hui">
        </link>
        <updated>2019-10-15T09:12:29.000Z</updated>
        <summary type="html"><![CDATA[<p><a href="http://creativecommons.org/licenses/by-sa/4.0/"></a>版权声明：本文为博主原创文章，遵循 <a href="http://creativecommons.org/licenses/by-sa/4.0/">CC 4.0 BY-SA</a> 版权协议，转载请附上原文出处链接和本声明。</p>
<p>本文链接：<a href="https://blog.csdn.net/lyhhj/article/details/94003014">https://blog.csdn.net/lyhhj/article/details/94003014</a></p>
]]></summary>
        <content type="html"><![CDATA[<p><a href="http://creativecommons.org/licenses/by-sa/4.0/"></a>版权声明：本文为博主原创文章，遵循 <a href="http://creativecommons.org/licenses/by-sa/4.0/">CC 4.0 BY-SA</a> 版权协议，转载请附上原文出处链接和本声明。</p>
<p>本文链接：<a href="https://blog.csdn.net/lyhhj/article/details/94003014">https://blog.csdn.net/lyhhj/article/details/94003014</a></p>
<!-- more -->
<blockquote>
<p>上篇文章我们简单的介绍了<strong>Navigation组件</strong>的使用，以及深入分析了源码中的具体实现，基本原理我们已经很清晰了。本篇文章主要介绍下我在项目中遇到的问题，以及目前关于<strong>Navigation</strong>实现的一些探讨。还没有看过上篇文章的可以查看一下：</p>
</blockquote>
<p><a href="https://blog.csdn.net/lyhhj/article/details/93757755">1. Jetpack源码解析—看完你就知道Navigation是什么了？</a></p>
<h1 id="1-背景">1. 背景</h1>
<p>先来看一下<code>Navigation</code>组件在官方文档上的介绍：</p>
<blockquote>
<p>今天，我们宣布推出Navigation组件，作为构建您的应用内界面的框架，重点是让单 Activity 应用成为首选架构。利用Navigation组件对 Fragment 的原生支持，您可以获得架构组件的所有好处（例如生命周期和 ViewModel），同时让此组件为您处理 FragmentTransaction 的复杂性。此外，Navigation组件还可以让您声明我们为您处理的转场。它可以自动构建正确的“向上”和“返回”行为，包含对深层链接的完整支持，并提供了帮助程序，用于将导航关联到合适的 UI 小部件，例如抽屉式导航栏和底部导航。</p>
</blockquote>
<p>确实经过源码分析我们就可以发现，<code>Navigation</code>组件封装了<code>Menu</code>菜单栏、<code>Fragment</code>的切换、<code>NavigationView</code>、<code>Drawerlayout</code>等一系列涉及到的组件，为了更方便的让我们使用单Activity多Fragment的架构。</p>
<p>但是我在使用的时候发现，当一个<code>Fragment</code>中的布局稍微复杂一些，切换<code>Fragment</code>的时候会顿卡，而且如果再配合<code>DrawrLayout</code>使用的话，还会闪一下屏，效果体验不是很好，本着这个问题，我又再次对<code>Navigation</code>组件进行了分析。</p>
<h1 id="2fragment切换">2.Fragment切换</h1>
<p>通过现象分析，发现当切换<code>NavigationView</code>中的menu菜单来切换<code>Fragment</code>时，<code>DrawerLayout</code>抽屉关闭有一个短暂的动画(具体的这里就不分析了,感兴趣的可以自行查看，但是这不是根本原因)，同时<code>Fragment</code>切换，发生顿卡和闪屏的现象。所以…还是看源码吧：</p>
<h2 id="21-navcontroller">2.1 NavController</h2>
<pre><code>private void navigate(@NonNull NavDestination node, @Nullable Bundle args,
            @Nullable NavOptions navOptions, @Nullable Navigator.Extras navigatorExtras) {
        boolean popped = false;
        ....
        Navigator&lt;NavDestination&gt; navigator = mNavigatorProvider.getNavigator(
                node.getNavigatorName());
        Bundle finalArgs = node.addInDefaultArgs(args);
        NavDestination newDest = navigator.navigate(node, finalArgs,
                navOptions, navigatorExtras);
       ....
    }
</code></pre>
<h2 id="22-fragmentnavigator">2.2 FragmentNavigator</h2>
<pre><code>public NavDestination navigate(@NonNull Destination destination, @Nullable Bundle args,
            @Nullable NavOptions navOptions, @Nullable Navigator.Extras navigatorExtras) {
        ...
        //根据classname反射获取Fragmnent
        final Fragment frag = instantiateFragment(mContext, mFragmentManager,
                className, args);
        frag.setArguments(args);
        //获取Fragment事务
        final FragmentTransaction ft = mFragmentManager.beginTransaction();
        //切换动画设置
        int enterAnim = navOptions != null ? navOptions.getEnterAnim() : -1;
        int exitAnim = navOptions != null ? navOptions.getExitAnim() : -1;
        int popEnterAnim = navOptions != null ? navOptions.getPopEnterAnim() : -1;
        int popExitAnim = navOptions != null ? navOptions.getPopExitAnim() : -1;
        if (enterAnim != -1 || exitAnim != -1 || popEnterAnim != -1 || popExitAnim != -1) {
            enterAnim = enterAnim != -1 ? enterAnim : 0;
            exitAnim = exitAnim != -1 ? exitAnim : 0;
            popEnterAnim = popEnterAnim != -1 ? popEnterAnim : 0;
            popExitAnim = popExitAnim != -1 ? popExitAnim : 0;
            ft.setCustomAnimations(enterAnim, exitAnim, popEnterAnim, popExitAnim);
        }
        //切换Fragment
        ft.replace(mContainerId, frag);
        ft.setPrimaryNavigationFragment(frag);
        ......
        
        ft.addToBackStack(generateBackStackName(mBackStack.size(), destId));
        ........
    }
</code></pre>
<p>看到这里就很清楚了吧，<code>Fragment</code>的切换是通过<code>replace</code>方式来切换的，并且加入回退栈，也就是说每次切换<code>Fragment</code>,都会销毁视图和重新创建视图。至于为什么用这种方式我是真的想不到，也没搞清楚初衷是什么？按照我们目前的开发来说，<code>Fragment</code>的切换通常都会使用<code>hide()</code>、<code>show()</code>，而<code>replcae()</code>的方式很少用，替换会把容器中的所有内容全都替换掉，有一些app会使用这样的做法，保持只有一个fragment在显示，减少了界面的层级关系。</p>
<blockquote>
<p>不仅仅是这样，上篇文章有小伙伴问切换了<code>Fragment</code>之后，点击返回按钮，发现之前的<code>Fragment</code>重走了<code>onCreateView</code>流程，这就意味着之前的状态没了。对于这个问题其实根据上面的分析，也能大概想到是因为什么，但是返回按钮的操作我之前还真没有看过源码，所以这次顺便了解一下：</p>
</blockquote>
<h1 id="3-返回都做了什么">3. 返回都做了什么</h1>
<h2 id="31-onbackpressed">3.1 onBackPressed</h2>
<p>我们同样从首页的<code>onBackPressed</code>入手：</p>
<pre><code>override fun onBackPressed() {
        if (drawerLayout.isDrawerOpen(GravityCompat.START)) {
            drawerLayout.closeDrawer(GravityCompat.START)
        } else {
            super.onBackPressed()
        }
    }


public void onBackPressed() {
        mOnBackPressedDispatcher.onBackPressed();
    }
</code></pre>
<p>最终调用了<code>mOnBackPressedDispatcher</code>的<code>onBackPressed()</code>方法。我们查看这个类，通过<strong>Debug</strong>调试，我们跟到了<code>FragmentManagerImpl</code>类：</p>
<pre><code>private final OnBackPressedCallback mOnBackPressedCallback =
            new OnBackPressedCallback(false) {
        @Override
        public void handleOnBackPressed() {
            FragmentManagerImpl.this.handleOnBackPressed();
        }
    };
</code></pre>
<p>发现点击返回按钮之后就走到这个，执行<code>handleOnBackPressed()</code>方法。</p>
<h2 id="32-fragmentmanagerimpl">3.2 FragmentManagerImpl</h2>
<p>继续跟踪源码，中间的一些过程我这里就忽略掉了，大部分都是一些<code>popBackStack</code>的操作，这里我们直接跟踪到关键点：</p>
<pre><code>//在BackStackRecords中进行入栈出栈操作。
private static void executeOps(ArrayList&lt;BackStackRecord&gt; records,
                                   ArrayList&lt;Boolean&gt; isRecordPop, int startIndex, int endIndex) {
        for (int i = startIndex; i &lt; endIndex; i++) {
            final BackStackRecord record = records.get(i);
            final boolean isPop = isRecordPop.get(i);
            if (isPop) {
                record.bumpBackStackNesting(-1);
                // Only execute the add operations at the end of
                // all transactions.
                boolean moveToState = i == (endIndex - 1);
                record.executePopOps(moveToState);
            } else {
                record.bumpBackStackNesting(1);
                record.executeOps();
            }
        }
    }
</code></pre>
<p>我们可以看到通过遍历栈数组，对<code>record</code>做<code>executePopOps()</code>操作，通过cmd来让<code>FragmentManager</code>做相关操作。</p>
<pre><code>void executePopOps(boolean moveToState) {
        for (int opNum = mOps.size() - 1; opNum &gt;= 0; opNum--) {
            final Op op = mOps.get(opNum);
            Fragment f = op.mFragment;
            if (f != null) {
                f.setNextTransition(FragmentManagerImpl.reverseTransit(mTransition),
                        mTransitionStyle);
            }
            switch (op.mCmd) {
                case OP_ADD:
                    f.setNextAnim(op.mPopExitAnim);
                    mManager.removeFragment(f);
                    break;
                case OP_REMOVE:
                    f.setNextAnim(op.mPopEnterAnim);
                    mManager.addFragment(f, false);
                    break;
                case OP_HIDE:
                    f.setNextAnim(op.mPopEnterAnim);
                    mManager.showFragment(f);
                    break;
                case OP_SHOW:
                    f.setNextAnim(op.mPopExitAnim);
                    mManager.hideFragment(f);
                    break;
                case OP_DETACH:
                    f.setNextAnim(op.mPopEnterAnim);
                    mManager.attachFragment(f);
                    break;
                case OP_ATTACH:
                    f.setNextAnim(op.mPopExitAnim);
                    mManager.detachFragment(f);
                    break;
                case OP_SET_PRIMARY_NAV:
                    mManager.setPrimaryNavigationFragment(null);
                    break;
                case OP_UNSET_PRIMARY_NAV:
                    mManager.setPrimaryNavigationFragment(f);
                    break;
                case OP_SET_MAX_LIFECYCLE:
                    mManager.setMaxLifecycle(f, op.mOldMaxState);
                    break;
                default:
                    throw new IllegalArgumentException(&quot;Unknown cmd: &quot; + op.mCmd);
            }
            if (!mReorderingAllowed &amp;&amp; op.mCmd != OP_REMOVE &amp;&amp; f != null) {
                mManager.moveFragmentToExpectedState(f);
            }
        }
        if (!mReorderingAllowed &amp;&amp; moveToState) {
            mManager.moveToState(mManager.mCurState, true);
        }
    }
</code></pre>
<p>同时重新设置<code>PrimaryNavigationFragment</code>，add我们的首页<code>Fragment</code>，最后执行<code>moveToState</code>方法：</p>
<pre><code>public void addFragment(Fragment fragment, boolean moveToStateNow) {
        if (DEBUG) Log.v(TAG, &quot;add: &quot; + fragment);
        makeActive(fragment);
        if (!fragment.mDetached) {
            if (mAdded.contains(fragment)) {
                throw new IllegalStateException(&quot;Fragment already added: &quot; + fragment);
            }
            synchronized (mAdded) {
                mAdded.add(fragment);
            }
            fragment.mAdded = true;
            fragment.mRemoving = false;
            if (fragment.mView == null) {
                fragment.mHiddenChanged = false;
            }
            if (isMenuAvailable(fragment)) {
                mNeedMenuInvalidate = true;
            }
            if (moveToStateNow) {
                moveToState(fragment);
            }
        }
    }
</code></pre>
<p>当我们继续跟踪的时候就会发现，在<code>moveToState</code>方法中，<code>Fragment</code>的state是<code>Fragment.CREATED</code>，并且会执行<code>performCreateView()</code>中的<code>onCreateView()</code>方法：</p>
<pre><code>    f.mContainer = container;
    f.performCreateView(f.performGetLayoutInflater(f.mSavedFragmentState), container, f.mSavedFragmentState);


void performCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container,
            @Nullable Bundle savedInstanceState) {
        mChildFragmentManager.noteStateNotSaved();
        mPerformedCreateView = true;
        mViewLifecycleOwner = new FragmentViewLifecycleOwner();
        mView = onCreateView(inflater, container, savedInstanceState);
        ....
    }
</code></pre>
<p>到这里就基本结束了，我只分析了一个大概，可以了解到点击返回按钮，同样也会重新创建视图，也就是<code>onCreateView</code>会重新走一遍。</p>
<h1 id="4-总结">4. 总结</h1>
<p>对于<code>Navigation</code>组件的这种切换方式，我也很无奈，而且也并没有暴露出来API供我们使用其他切换方式，我也询问了很多大佬，他们也不是很清楚，也有的发现这也是<code>Navigation</code>的一个很大的诟病。那么有没有解决办法呢？很遗憾我目前还没有想到比较好的办法。</p>
<blockquote>
<p>基于<code>Navigation</code>用来承载<code>Fragment</code>的容器是<code>NavHostFragment</code>，所以我们并不能使用<code>ViewPager+Fragment</code>的通过<code>setUserVisibleHint</code>实现懒加载的方式；同样我们也没办法使用<code>onHiddenChanged</code>的方式来实现复杂逻辑的加载；但是你可以在进入<code>Fragment</code>的时候先显示一个Loading框，加载完数据之后再渲染布局，这样的话可以减少一些尴尬。</p>
</blockquote>
<h2 id="41-建议">4.1 建议</h2>
<p>这里我的建议是：如果你的每个<code>Fragment</code>真的每次都需要重新绘制的话，你可以考虑使用<code>Navigation</code>组件来实现，毕竟通过<code>Navgation</code>组件真的很方便帮助我们切换导航，而且虽然布局会重新绘制，但是Google的官方Demo–<a href="https://github.com/googlesamples/android-sunflower">SunFlower</a>还是使用了这种方式，所以这里面我觉得：官方推荐我们使用Jetpack组件中的<strong>ViewModel</strong>、<strong>LiveData</strong>…等，可以发现<strong>SunFlower</strong>demo中，即便是切换Fragmengt也不会有很明显的卡顿现象，因为每个Fragment即便重新绘制，但是View所对应的<strong>ViewModel</strong>还在，数据并不需要重新加载或者请求，当然这仅仅是我自己的看法啊.</p>
<p>但是如果你没有这种场景的话，建议还是用普通的方式我们自己来控制切换吧，这样无论是基于<code>Drawerlayout</code>还是<code>BottomNaivgationView</code>的话，我们可以自己实现切换。这块我也不是很确定哈，也希望听取大家的意见和建议。</p>
<blockquote>
<p>我还发现一个问题，就是Play商店，现在就是这样的情况，抽屉栏中的<code>Item</code>每个基本都是重新绘制，而且第一个<code>Item</code><strong>我的应用和游戏</strong>切换的时候就会有很明显的卡顿和闪屏，猜测Google play 商店具体是不是使用的<code>Navigation</code>组件不敢确定，但是它很大几率是通过<code>replace</code>方式来做的切换。感兴趣的话可以看一下，我这贴一个GIF图，不一定能看清楚，不过确实是这个效果。</p>
</blockquote>
<figure data-type="image" tabindex="1"><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAxOS82LzI2LzE2YjkzMTIzMjZlYzRmZDY" alt=""></figure>
<p>最后，如果有不对的地方或者更好的解决办法，可以一起讨论一下哈！</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[[转载] 3. Jetpack源码解析---用Lifecycles管理生命周期]]></title>
        <id>https://ouluqiang.github.io//post/zhuan-zai-3-jetpack-yuan-ma-jie-xi-yong-lifecycles-guan-li-sheng-ming-zhou-qi</id>
        <link href="https://ouluqiang.github.io//post/zhuan-zai-3-jetpack-yuan-ma-jie-xi-yong-lifecycles-guan-li-sheng-ming-zhou-qi">
        </link>
        <updated>2019-10-15T09:09:17.000Z</updated>
        <summary type="html"><![CDATA[<p><a href="http://creativecommons.org/licenses/by-sa/4.0/"></a>版权声明：本文为博主原创文章，遵循 <a href="http://creativecommons.org/licenses/by-sa/4.0/">CC 4.0 BY-SA</a> 版权协议，转载请附上原文出处链接和本声明。</p>
<p>本文链接：<a href="https://blog.csdn.net/lyhhj/article/details/91440191">https://blog.csdn.net/lyhhj/article/details/91440191</a></p>
]]></summary>
        <content type="html"><![CDATA[<p><a href="http://creativecommons.org/licenses/by-sa/4.0/"></a>版权声明：本文为博主原创文章，遵循 <a href="http://creativecommons.org/licenses/by-sa/4.0/">CC 4.0 BY-SA</a> 版权协议，转载请附上原文出处链接和本声明。</p>
<p>本文链接：<a href="https://blog.csdn.net/lyhhj/article/details/91440191">https://blog.csdn.net/lyhhj/article/details/91440191</a></p>
<!-- more -->
<h1 id="1-背景">1. 背景</h1>
<blockquote>
<p>上一篇我门对Jetpack组件中的<code>Navigation</code>做了介绍，并且对其做了源码分析，相信看过之后已经对此有了一定的了解，本篇文章我们会对<code>Lifecycles</code>进行使用及源码的介绍，还没看上篇的可以看一下：</p>
</blockquote>
<p><strong>系列文章</strong>：</p>
<p><a href="https://blog.csdn.net/lyhhj/article/details/93757755">1. Jetpack源码解析—看完你就知道Navigation是什么了？</a></p>
<p><a href="https://blog.csdn.net/lyhhj/article/details/94003014">2. Jetpack源码解析—Navigation为什么切换Fragment会重绘？</a></p>
<h1 id="2-基础">2. 基础</h1>
<h2 id="21-简介">2.1 简介</h2>
<p><code>Lifecycles</code>是一个持有组件生命周期状态（如Activity、Fragment）信息的类，并允许其他对象观察此状态。可以帮助我们方便的管理<code>Activity</code>和<code>Fragment</code>的生命周期。</p>
<p><code>Lifecycle组件</code>中通过两个枚举类来跟踪其关联组件的生命周期：</p>
<figure data-type="image" tabindex="1"><img src="https://img-blog.csdn.net/20180610101922250?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsZXh3bGw=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70#align=left&amp;display=inline&amp;height=381&amp;originHeight=381&amp;originWidth=700&amp;status=done&amp;width=700" alt=""></figure>
<h2 id="22-基本使用">2.2 基本使用</h2>
<blockquote>
<p>在我们的日常开发中，经常需要我们在Activity或者Fragment的生命周期方法中手动去管理一下资源的释放等行为。举个简单的例子，当我们做自定义相机扫描的时候，camera相关的资源就需要我们手动的去释放及开启预览；或者我们在使用MVP模式去开发的时候，P的创建和销毁也需要我们在生命周期方法中去操作。</p>
</blockquote>
<p>通过<code>Lifecycles组件</code>我们可以这样使用：</p>
<p>我们可以定义一个Observer实现<code>LifecycleObserver</code>，并且在<code>Activity</code>或者<code>Fragment</code>中进行观察：</p>
<pre><code>/**
 * created by ${Hankkin}
 * on 2019-06-10
 */

class MyObserver : LifecycleObserver {

    @OnLifecycleEvent(Lifecycle.Event.ON_START)
    fun onStart() {
        Log.e(javaClass.name, &quot;-------onStart&quot;)
    }

    @OnLifecycleEvent(Lifecycle.Event.ON_CREATE)
    fun onCreate() {
        Log.e(javaClass.name, &quot;-------onCreate&quot;)
    }

    @OnLifecycleEvent(Lifecycle.Event.ON_RESUME)
    fun onResume() {
        Log.e(javaClass.name, &quot;-------onResume&quot;)
    }

    @OnLifecycleEvent(Lifecycle.Event.ON_PAUSE)
    fun onPause() {
        Log.e(javaClass.name, &quot;-------onPause&quot;)
    }


    @OnLifecycleEvent(Lifecycle.Event.ON_STOP)
    fun onStop() {
        Log.e(javaClass.name, &quot;-------onStop&quot;)
    }


    @OnLifecycleEvent(Lifecycle.Event.ON_DESTROY)
    fun onDestroy() {
        Log.e(javaClass.name, &quot;-------onDestroy&quot;)
    }

}
</code></pre>
<p>下面是Activity：</p>
<pre><code>class MainActivity : AppCompatActivity() {
    
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)


        lifecycle.addObserver(MyObserver())
        Log.e(javaClass.name, &quot;-------onCreate&quot;)

    }

    override fun onStart() {
        super.onStart()
        Log.e(javaClass.name, &quot;-------onStart&quot;)
    }

    override fun onResume() {
        super.onResume()
        Log.e(javaClass.name, &quot;-------onResume&quot;)
    }

    override fun onPause() {
        super.onPause()
        Log.e(javaClass.name, &quot;-------onPause&quot;)
    }

    override fun onStop() {
        super.onStop()
        Log.e(javaClass.name, &quot;-------onStop&quot;)
    }

    override fun onDestroy() {
        super.onDestroy()
        Log.e(javaClass.name, &quot;-------onDestroy&quot;)
    }
}
</code></pre>
<p>启动Activity，我们可以看到控制台中的打印日志：</p>
<pre><code>MainActivity: -------onCreate
MyObserver: -------onCreate
MainActivity: -------onStart
MyObserver: -------onStart
MainActivity: -------onResume
MyObserver: -------onResume
......
</code></pre>
<p>通过控制台打印我们可以看到我们的观察者Activity和被观察者的日志均被打印了。具体是怎么实现的呢？</p>
<h1 id="3-源码分析">3. 源码分析</h1>
<p>通过代码我们大概能看出来<code>Lifecycles</code>组件是通过观察者模式来实现的，接下来我们具体分析实现原理，我们发现在<code>Activity</code>和<code>Fragment</code>中可以直接通过<code>getLifecycle()</code>方法获取到<code>Lifecycle</code>，那么我们就从这里入手:</p>
<h2 id="31-getlifecycle">3.1 getLifecycle()</h2>
<p>我们点击进去发现<strong>ComponentActivity</strong>中实现了<code>LifecycleOwner</code>接口，<code>LifecycleOwner</code>接口中则声明了<code>getLifecycle()</code>方法，而<strong>ComponentActivity</strong>中直接返回了<strong>mLifecycleRegistry</strong>：</p>
<pre><code>public class ComponentActivity extends androidx.core.app.ComponentActivity implements
        LifecycleOwner,
        ViewModelStoreOwner,
        SavedStateRegistryOwner,
        OnBackPressedDispatcherOwner {

    private final LifecycleRegistry mLifecycleRegistry = new LifecycleRegistry(this);
    ......
    @NonNull
    @Override
    public Lifecycle getLifecycle() {
        return mLifecycleRegistry;
    }
</code></pre>
<p><code>LifecycleRegistry</code>是个什么东西呢？原来它继承了<strong>Lifecycle</strong></p>
<pre><code>public class LifecycleRegistry extends Lifecycle
</code></pre>
<h2 id="32-lifecycle和lifecycleregistry">3.2 Lifecycle和LifecycleRegistry</h2>
<p>我们看一下Lifecycle类：</p>
<pre><code>public abstract class Lifecycle {

        //注册LifecycleObserver （比如Presenter）
        public abstract void addObserver(@NonNull LifecycleObserver observer);
        //移除LifecycleObserver 
        public abstract void removeObserver(@NonNull LifecycleObserver observer);
        //获取当前状态
        public abstract State getCurrentState();

        public enum Event {
            ON_CREATE,
            ON_START,
            ON_RESUME,
            ON_PAUSE,
            ON_STOP,
            ON_DESTROY,
            ON_ANY
        }
        
       public enum State {
            DESTROYED,
            INITIALIZED,
            CREATED,
            STARTED,
            RESUMED;

            public boolean isAtLeast(@NonNull State state) {
                return compareTo(state) &gt;= 0;
            }
       }
}
</code></pre>
<p><strong>Lifecycle</strong>中就是声明了一些抽象方法和两个状态的枚举类，具体的实现看<strong>LifecycleRegistry</strong>：</p>
<pre><code>public class LifecycleRegistry extends Lifecycle {

// LifecycleObserver Map，每一个Observer都有一个State
    private FastSafeIterableMap&lt;LifecycleObserver, ObserverWithState&gt; mObserverMap = new FastSafeIterableMap&lt;&gt;();
    // 当前的状态
    private State mState;
    // 生命周期拥有者，ComponentActivity继承了LifecycleOwner
    private final WeakReference&lt;LifecycleOwner&gt; mLifecycleOwner;

    //修改State值
    private void moveToState(State next) {
        if (mState == next) {
            return;
        }
        mState = next;
        if (mHandlingEvent || mAddingObserverCounter != 0) {
            mNewEventOccurred = true;
            // we will figure out what to do on upper level.
            return;
        }
        mHandlingEvent = true;
        sync();
        mHandlingEvent = false;
    }

    /**
    * 添加LifecycleObserver观察者，并将之前的状态分发给这个Observer,例如我们在onResume之后注册这个Observer，
    * 该Observer依然能收到ON_CREATE事件
    */
    @Override
    public void addObserver(@NonNull LifecycleObserver observer) {
        State initialState = mState == DESTROYED ? DESTROYED : INITIALIZED;
        //新建带有状态的观察者
        ObserverWithState statefulObserver = new ObserverWithState(observer, initialState);
        ObserverWithState previous = mObserverMap.putIfAbsent(observer, statefulObserver);
        ......
        // 例如：Observer初始状态是INITIALIZED，当前状态是RESUMED，需要将INITIALIZED到RESUMED之间的
        // 所有事件分发给Observer
        while ((statefulObserver.mState.compareTo(targetState) &lt; 0
                &amp;&amp; mObserverMap.contains(observer))) {
            pushParentState(statefulObserver.mState);
            statefulObserver.dispatchEvent(lifecycleOwner, upEvent(statefulObserver.mState));
            popParentState();
            targetState = calculateTargetState(observer);
        }
        ......
}

/**
     * 同步Observer状态，并分发事件
     */
    private void sync() {
        LifecycleOwner lfecycleOwner = mLifecycleOwner.get();
        if (lifecycleOwner == null) {
            Log.w(LOG_TAG, &quot;LifecycleOwner is garbage collected, you shouldn't try dispatch &quot;
                    + &quot;new events from it.&quot;);
            return;
        }
        while (!isSynced()) {
            mNewEventOccurred = false;
            // State中，状态值是从DESTROYED-INITIALIZED-CREATED-STARTED-RESUMED增大
            // 如果当前状态值 &lt; Observer状态值，需要通知Observer减小状态值，直到等于当前状态值
            if (mState.compareTo(mObserverMap.eldest().getValue().mState) &lt; 0) {
                backwardPass(lifecycleOwner);
            }
            Entry&lt;LifecycleObserver, ObserverWithState&gt; newest = mObserverMap.newest();
            // 如果当前状态值 &gt; Observer状态值，需要通知Observer增大状态值，直到等于当前状态值
            if (!mNewEventOccurred &amp;&amp; newest != null
                    &amp;&amp; mState.compareTo(newest.getValue().mState) &gt; 0) {
                forwardPass(lifecycleOwner);
            }
        }
        mNewEventOccurred = false;
    }

    /**
     * 向前传递事件，对应图中的INITIALIZED -&gt; RESUMED
     * 增加Observer的状态值，直到状态值等于当前状态值
     */
    private void forwardPass(LifecycleOwner lifecycleOwner) {
        Iterator&lt;Entry&lt;LifecycleObserver, ObserverWithState&gt;&gt; ascendingIterator =
                mObserverMap.iteratorWithAdditions();
        while (ascendingIterator.hasNext() &amp;&amp; !mNewEventOccurred) {
            Entry&lt;LifecycleObserver, ObserverWithState&gt; entry = ascendingIterator.next();
            ObserverWithState observer = entry.getValue();
            while ((observer.mState.compareTo(mState) &lt; 0 &amp;&amp; !mNewEventOccurred
                    &amp;&amp; mObserverMap.contains(entry.getKey()))) {
                pushParentState(observer.mState);
                // 分发状态改变事件
                observer.dispatchEvent(lifecycleOwner, upEvent(observer.mState));
                popParentState();
            }
        }
    }

    /**
     * 向后传递事件，对应图中的RESUMED -&gt; DESTROYED
     * 减小Observer的状态值，直到状态值等于当前状态值
     */
    private void backwardPass(LifecycleOwner lifecycleOwner) {
        Iterator&lt;Entry&lt;LifecycleObserver, ObserverWithState&gt;&gt; descendingIterator =
                mObserverMap.descendingIterator();
        while (descendingIterator.hasNext() &amp;&amp; !mNewEventOccurred) {
            Entry&lt;LifecycleObserver, ObserverWithState&gt; entry = descendingIterator.next();
            ObserverWithState observer = entry.getValue();
            while ((observer.mState.compareTo(mState) &gt; 0 &amp;&amp; !mNewEventOccurred
                    &amp;&amp; mObserverMap.contains(entry.getKey()))) {
                Event event = downEvent(observer.mState);
                // 分发状态改变事件
                pushParentState(getStateAfter(event));
                observer.dispatchEvent(lifecycleOwner, event);
                popParentState();
            }
        }
    }
</code></pre>
<p><code>LifecycleRegistry</code>代码我门看完了，注释也已经很清楚了，基本作用就是添加观察者，响应生命周期事件，分发生命周期事件的作用。</p>
<h2 id="33-reportfragment">3.3 ReportFragment</h2>
<p>接下来我们继续分析<code>ComponentActivity</code>，我们在<code>onCreate()</code>声明周期中发现一个比较熟悉<code>ReportFragment</code>，这个fragment我以前在做内存泄漏优化的时候经常碰到，在leakcanary中经常会报出这个类，所以这里面看看<code>ReportFragment.injectIfNeededIn(this);</code>到底做了什么？</p>
<pre><code>@RestrictTo(RestrictTo.Scope.LIBRARY_GROUP_PREFIX)
public class ReportFragment extends Fragment {
    private static final String REPORT_FRAGMENT_TAG = &quot;androidx.lifecycle&quot;
            + &quot;.LifecycleDispatcher.report_fragment_tag&quot;;

    public static void injectIfNeededIn(Activity activity) {
        // ProcessLifecycleOwner should always correctly work and some activities may not extend
        // FragmentActivity from support lib, so we use framework fragments for activities
        android.app.FragmentManager manager = activity.getFragmentManager();
        if (manager.findFragmentByTag(REPORT_FRAGMENT_TAG) == null) {
            manager.beginTransaction().add(new ReportFragment(), REPORT_FRAGMENT_TAG).commit();
            // Hopefully, we are the first to make a transaction.
            manager.executePendingTransactions();
        }
    }
    private void dispatchCreate(ActivityInitializationListener listener) {
        if (listener != null) {
            listener.onCreate();
        }
    }

    private void dispatchStart(ActivityInitializationListener listener) {
        if (listener != null) {
            listener.onStart();
        }
    }

    private void dispatchResume(ActivityInitializationListener listener) {
        if (listener != null) {
            listener.onResume();
        }
    }

    @Override
    public void onActivityCreated(Bundle savedInstanceState) {
        super.onActivityCreated(savedInstanceState);
        dispatchCreate(mProcessListener);
        dispatch(Lifecycle.Event.ON_CREATE);
    }

    @Override
    public void onStart() {
        super.onStart();
        dispatchStart(mProcessListener);
        dispatch(Lifecycle.Event.ON_START);
    }

    @Override
    public void onResume() {
        super.onResume();
        dispatchResume(mProcessListener);
        dispatch(Lifecycle.Event.ON_RESUME);
    }

    @Override
    public void onPause() {
        super.onPause();
        dispatch(Lifecycle.Event.ON_PAUSE);
    }

    @Override
    public void onStop() {
        super.onStop();
        dispatch(Lifecycle.Event.ON_STOP);
    }

    @Override
    public void onDestroy() {
        super.onDestroy();
        dispatch(Lifecycle.Event.ON_DESTROY);
        // just want to be sure that we won't leak reference to an activity
        mProcessListener = null;
    }

    private void dispatch(Lifecycle.Event event) {
        Activity activity = getActivity();
        if (activity instanceof LifecycleRegistryOwner) {
            ((LifecycleRegistryOwner) activity).getLifecycle().handleLifecycleEvent(event);
            return;
        }

        if (activity instanceof LifecycleOwner) {
            Lifecycle lifecycle = ((LifecycleOwner) activity).getLifecycle();
            if (lifecycle instanceof LifecycleRegistry) {
                ((LifecycleRegistry) lifecycle).handleLifecycleEvent(event);
            }
        }
    }
</code></pre>
<p>查看源码我们发现，<code>ReportFragment</code>在每个生命周期中都做了分发事件的处理，通过调用<code>getLifecycle().handleLifecycleEvent(event)</code>来做生命周期的分发。意思也就是在<code>ComponentActivity</code>中添加了一个没有页面的<code>ReportFragment</code>，当Activity生命周期变化的时候，通过调用<code>LifecycleRegistry.handleLifecycleEvent()</code>方法通知LifecycleRegistry改变状态，LifecycleRegistry内部调用<code>moveToState()</code>改变状态，并调用每个LifecycleObserver.onStateChange()方法通知生命周期变化。</p>
<blockquote>
<p>我们通过查看ReportFragment调用，发现还有两个类也调用了它，一个是<code>LifecycleDispatcher</code>，一个是<code>ProcessLifecycleOwner</code>，这两个究竟是做什么的呢？</p>
</blockquote>
<p>[外链图片转存失败(img-Kmu4o9EL-1562754821909)(<a href="http://psv0rasgi.bkt.clouddn.com/jetpack/_image/2019-06-10/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202019-06-11%20%E4%B8%8B%E5%8D%882.19.20%20%282%29.png#align=left&amp;display=inline&amp;height=324&amp;originHeight=648&amp;originWidth=1112&amp;status=done&amp;width=556">http://psv0rasgi.bkt.clouddn.com/jetpack/_image/2019-06-10/屏幕快照 2019-06-11 下午2.19.20 (2).png#align=left&amp;display=inline&amp;height=324&amp;originHeight=648&amp;originWidth=1112&amp;status=done&amp;width=556</a>)]</p>
<h2 id="34-lifecycledispatcher">3.4 LifecycleDispatcher</h2>
<pre><code>class LifecycleDispatcher {

    private static AtomicBoolean sInitialized = new AtomicBoolean(false);

    static void init(Context context) {
        if (sInitialized.getAndSet(true)) {
            return;
        }
        ((Application) context.getApplicationContext())
                .registerActivityLifecycleCallbacks(new DispatcherActivityCallback());
    }

    @SuppressWarnings(&quot;WeakerAccess&quot;)
    @VisibleForTesting
    static class DispatcherActivityCallback extends EmptyActivityLifecycleCallbacks {

        @Override
        public void onActivityCreated(Activity activity, Bundle savedInstanceState) {
            ReportFragment.injectIfNeededIn(activity);
        }

        @Override
        public void onActivityStopped(Activity activity) {
        }

        @Override
        public void onActivitySaveInstanceState(Activity activity, Bundle outState) {
        }
    }

    private LifecycleDispatcher() {
    }
}
</code></pre>
<p>我们查看源码，发现在<code>init()</code>方法中，通过<code>Application</code>注册了<code>DispatcherActivityCallback</code>，并且在<code>onActivityCreated</code>中将<code>ReportFragment</code>注入到Activity中。</p>
<h2 id="35-processlifecycleowner">3.5 ProcessLifecycleOwner</h2>
<pre><code>public class ProcessLifecycleOwner implements LifecycleOwner {

       private final LifecycleRegistry mRegistry = new LifecycleRegistry(this);

    private Runnable mDelayedPauseRunnable = new Runnable() {
        @Override
        public void run() {
            dispatchPauseIfNeeded();
            dispatchStopIfNeeded();
        }
    };

    private ActivityInitializationListener mInitializationListener =
            new ActivityInitializationListener() {
                @Override
                public void onCreate() {
                }

                @Override
                public void onStart() {
                    activityStarted();
                }

                @Override
                public void onResume() {
                    activityResumed();
                }
            };

    private static final ProcessLifecycleOwner sInstance = new ProcessLifecycleOwner();

   
    public static LifecycleOwner get() {
        return sInstance;
    }

    static void init(Context context) {
        sInstance.attach(context);
    }

    void activityStarted() {
        mStartedCounter++;
        if (mStartedCounter == 1 &amp;&amp; mStopSent) {
            mRegistry.handleLifecycleEvent(Lifecycle.Event.ON_START);
            mStopSent = false;
        }
    }

    void activityResumed() {
        mResumedCounter++;
        if (mResumedCounter == 1) {
            if (mPauseSent) {
                mRegistry.handleLifecycleEvent(Lifecycle.Event.ON_RESUME);
                mPauseSent = false;
            } else {
                mHandler.removeCallbacks(mDelayedPauseRunnable);
            }
        }
    }

   ......
    private void dispatchStopIfNeeded() {
        if (mStartedCounter == 0 &amp;&amp; mPauseSent) {
            mRegistry.handleLifecycleEvent(Lifecycle.Event.ON_STOP);
            mStopSent = true;
        }
    }

    private ProcessLifecycleOwner() {
    }
    //监听Application生命周期，并分发给Activity
    void attach(Context context) {
        mHandler = new Handler();
        mRegistry.handleLifecycleEvent(Lifecycle.Event.ON_CREATE);
        Application app = (Application) context.getApplicationContext();
        app.registerActivityLifecycleCallbacks(new EmptyActivityLifecycleCallbacks() {
            @Override
            public void onActivityCreated(Activity activity, Bundle savedInstanceState) {
                ReportFragment.get(activity).setProcessListener(mInitializationListener);
            }

            @Override
            public void onActivityPaused(Activity activity) {
                activityPaused();
            }

            @Override
            public void onActivityStopped(Activity activity) {
                activityStopped();
            }
        });
    }
}
</code></pre>
<p>根据官方注释，我们可以了解到：</p>
<ul>
<li>ProcessLifecycleOwner是用来监听Application生命周期的，因此它只会分发一次ON_CREATE事件，并且不会分发ON_DESTROY事件。</li>
<li>ProcessLifecycleOwner在Activity的onResume和onStop方法中都采用了Handle.postDelayed()方法，是为了处理Activity重建时比如横竖屏幕切换时，不会发送事件。</li>
<li>ProcessLifecycleOwner一般用来判断应用是在前台还是后台。但由于使用了Handle.postDelayed()，因此这个判断不是即时的，有默认700ms的延迟。</li>
<li>ProcessLifecycleOwner与LifecycleDispatcher一样，都是通过注册Application.registerActivityLifecycleCallbacks来监听Activity的生命周期回调，来给每个Activity添加ReportFragment的。</li>
</ul>
<p>看了着两个类我们发现它们的入口均为<code>init()</code>,所以看一下谁调用了？</p>
<h2 id="36-processlifecycleownerinitializer">3.6 ProcessLifecycleOwnerInitializer</h2>
<pre><code>public class ProcessLifecycleOwnerInitializer extends ContentProvider {
    @Override
    public boolean onCreate() {
        LifecycleDispatcher.init(getContext());
        ProcessLifecycleOwner.init(getContext());
        return true;
    }

    @Nullable
    @Override
    public Cursor query(@NonNull Uri uri, String[] strings, String s, String[] strings1,
            String s1) {
        return null;
    }

    @Nullable
    @Override
    public String getType(@NonNull Uri uri) {
        return null;
    }

    @Nullable
    @Override
    public Uri insert(@NonNull Uri uri, ContentValues contentValues) {
        return null;
    }

    @Override
    public int delete(@NonNull Uri uri, String s, String[] strings) {
        return 0;
    }

    @Override
    public int update(@NonNull Uri uri, ContentValues contentValues, String s, String[] strings) {
        return 0;
    }
}
</code></pre>
<p>果真，在<code>ProcessLifecycleOwnerInitializer</code> 的<code>onCreate()</code>中对这两个进行了初始化，看类名可以翻译成_进程生命周期初始化_，到这里我们对该类就找不到调用者或者使用者了，所以不得不百度一下，发现有人说这个类是在<code>AndroidManifest.xml</code>中声明的，在构建APK过程中，AS会将多个模块的<code>AndroidManifest.xml</code>合并到一起，所以查看build目录，具体路径为<code>build/intermediates/bundle_manifest/debug/processDebugManifest/bundle-manifest/AndroidManifest.xml</code>，果真在里面：</p>
<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;
    package=&quot;com.hankkin.reading_aac&quot;
    android:versionCode=&quot;1&quot;
    android:versionName=&quot;1.0&quot; &gt;

    &lt;uses-sdk
        android:minSdkVersion=&quot;19&quot;
        android:targetSdkVersion=&quot;28&quot; /&gt;

    &lt;application
        android:appComponentFactory=&quot;androidx.core.app.CoreComponentFactory&quot;
        android:debuggable=&quot;true&quot;
        android:icon=&quot;@mipmap/ic_launcher&quot;
        android:label=&quot;@string/app_name&quot;
        android:roundIcon=&quot;@mipmap/ic_launcher_round&quot;
        android:supportsRtl=&quot;true&quot;
        android:testOnly=&quot;true&quot;
        android:theme=&quot;@style/AppTheme&quot; &gt;
        &lt;activity android:name=&quot;com.hankkin.reading_aac.ui.LoginActivity&quot; &gt;
        &lt;/activity&gt;
        &lt;activity android:name=&quot;com.hankkin.reading_aac.MainActivity&quot; &gt;
            &lt;intent-filter&gt;
                &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;

                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;
            &lt;/intent-filter&gt;
        &lt;/activity&gt;

        &lt;provider
            android:name=&quot;androidx.lifecycle.ProcessLifecycleOwnerInitializer&quot;
            android:authorities=&quot;com.hankkin.reading_aac.lifecycle-process&quot;
            android:exported=&quot;false&quot;
            android:multiprocess=&quot;true&quot; /&gt;
    &lt;/application&gt;

&lt;/manifest&gt;
</code></pre>
<p>到这里整个Lifecycle初始化的过程就结束了。</p>
<h1 id="4-总结">4. 总结</h1>
<p>经过上面的源码分析，我们可以大概给整个<strong>Lifecycle组件</strong>分为三部分：</p>
<h2 id="41-lifecycle的初始化">4.1 Lifecycle的初始化</h2>
<pre><code>通过在manifest中声明provider，`ProcessLifecycleOwnerInitializer`注册Activity和fragment.的声明周期回调并做监听，同时向Activity中添加一个空白的`ReportFragment`，使用它作为生命周期的事件分发。而当Activity和Fragment生命周期状态发生改变时，都通过LifecycleRegistryOwner来处理生命周期状态的改变。
</code></pre>
<h2 id="42-lifecycle的状态改变及状态分发">4.2 Lifecycle的状态改变及状态分发</h2>
<pre><code>在`ReportFragment`中调用`LifecycleRegister.handleLifecycleEvent(Lifecycle.Event)`，通过**获取事件对应的下一个状态**以及**改变当前状态到下一个状态**，同步分发事件；最后将各个观察者的生命周期状态依次移动到正确状态。
</code></pre>
<p>可以查看下面的时序图：</p>
<figure data-type="image" tabindex="2"><img src="https://img-blog.csdn.net/20180922213240512?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JpZXpoaWh1YQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70#align=left&amp;display=inline&amp;height=185&amp;originHeight=185&amp;originWidth=703&amp;status=done&amp;width=703" alt=""></figure>
<h2 id="43-lifecycle解析生命周期">4.3 Lifecycle解析生命周期</h2>
<p>我们声明的<strong>MyObserver</strong>中的方法都是带有注解的，查看<code>OnLifecycleEvent</code>：</p>
<pre><code>@Retention(RetentionPolicy.RUNTIME)
@Target(ElementType.METHOD)
public @interface OnLifecycleEvent {
    Lifecycle.Event value();
}
</code></pre>
<p>注解修饰的方法会通过反射的方式获取，并且保存在<code>ClassesInfoCache</code>中，然后在生命周期发生改变的时候再找到对应 Event 的方法，通过反射来调用方法。</p>
<h1 id="5-参考链接">5. 参考链接：</h1>
<p><a href="https://juejin.im/post/5cd81634e51d453af7192b87#heading-10">https://juejin.im/post/5cd81634e51d453af7192b87#heading-10</a></p>
<p>https://yuqirong.me/2018/07/15/Android%20Architecture%20Component%E4%B9%8BLifecycle%E8%A7%A3%E6%9E%90/</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Android Studio常用插件]]></title>
        <id>https://ouluqiang.github.io//post/android-studio-chang-yong-cha-jian</id>
        <link href="https://ouluqiang.github.io//post/android-studio-chang-yong-cha-jian">
        </link>
        <updated>2019-10-10T03:21:56.000Z</updated>
        <content type="html"><![CDATA[<h2 id="gsonformat">GsonFormat</h2>
<p>将json字符串转换成一个Java Bean</p>
<h2 id="jsontokotlin">JsonToKotlin</h2>
<p>将json字符串转换成一个Java Bean</p>
<h2 id="findviewbyme">findViewByMe</h2>
<p>快速自动生成findViewById</p>
<h2 id="jsononlineviewer">JsonOnlineViewer</h2>
<p>在Android Studio中请求、调试接口。</p>
<h2 id="gradledependencyhelper">GradleDependencyHelper</h2>
<p>maven gradle 依赖支持自动补全插件。</p>
<h2 id="jimu-mirror">jimu Mirror</h2>
<p>一个可以让你在真实的设备上迅速测试布局的插件。jimu Mirror允许在设备上预览随同编码更新的Android布局。</p>
<h2 id="drawable-importer">Drawable Importer</h2>
<p>添加了一个在不同分辨率导入画板或缩放指定图像到定义分辨率的选项</p>
<h2 id="androidproguardplugin">AndroidProguardPlugin</h2>
<p>一键生成项目混淆代码插件，值得你安装。</p>
<h2 id="folding-plugin">folding-plugin</h2>
<p>布局文件分组的插件。</p>
<h2 id="androidlocalizationer">AndroidLocalizationer</h2>
<p>可用于将项目中的 string 资源自动翻译为其他语言的 Android Studio/IntelliJ IDEA 插件。</p>
<h2 id="permissionsdispatcher-plugin">PermissionsDispatcher plugin</h2>
<p>自动生成6.0权限的代码。</p>
<h2 id="androidpixeldimengenerator">AndroidPixelDimenGenerator</h2>
<p>Android Studio自动生成dimen.xml文件插件。</p>
<h2 id="adb-wifi">adb wifi</h2>
<p>使用wifi无线调试你的app，无需root权限。</p>
<h1 id="findbugs-idea">findBugs-IDEA</h1>
<p>查找bug的插件，Android Studio也提供了代码审查的功能（Analyze-Inspect Code…）</p>
<h2 id="android-parcelable-code-generator">Android Parcelable code generator</h2>
<p>Parcelable是Android实体类的一种实例化方式。</p>
<h2 id="apkmultichannelplugin">ApkMultiChannelPlugin</h2>
<p>这是一个为了方便 Android 多渠道打包的 Android Studio / IDEA 插件</p>
<h2 id="lint-cleaner-plugin">lint-cleaner-plugin</h2>
<p>移除Android中无用资源</p>
<h2 id="translation">Translation</h2>
<p>翻译</p>
<h2 id="findbugs">findBugs</h2>
<p>查找bug的插件</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[转载文章]]></title>
        <id>https://ouluqiang.github.io//post/zhuan-zai-wen-zhang</id>
        <link href="https://ouluqiang.github.io//post/zhuan-zai-wen-zhang">
        </link>
        <updated>2019-10-07T09:32:45.000Z</updated>
        <summary type="html"><![CDATA[<p>记得无论怎么转载，都要注明“转载”并且说明出处一定要选择【转载】，尊重原创！！</p>
]]></summary>
        <content type="html"><![CDATA[<p>记得无论怎么转载，都要注明“转载”并且说明出处一定要选择【转载】，尊重原创！！</p>
<!-- more -->
<p>在浏览器打开文章，右键 -&gt; 检查,或者直接F12看html代码<br>
<img src="https://ouluqiang.github.io//post-images/1570441106069.png" alt=""></p>
<p>再复制文章内容的代码<br>
<img src="https://ouluqiang.github.io//post-images/1570441466035.png" alt=""></p>
<p>将html直接粘贴到markdown也是可以的，但是我发现代码块的样式会乱掉，所以可以先将html转换成md，<a href="https://tool.lu/markdown/">https://tool.lu/markdown/</a><br>
<img src="https://ouluqiang.github.io//post-images/1570441613122.png" alt=""></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[[转载] 1. Jetpack源码解析---看完你就知道Navigation是什么了？]]></title>
        <id>https://ouluqiang.github.io//post/jetpack-navigation</id>
        <link href="https://ouluqiang.github.io//post/jetpack-navigation">
        </link>
        <updated>2019-10-07T06:14:33.000Z</updated>
        <summary type="html"><![CDATA[<p><a href="http://creativecommons.org/licenses/by-sa/4.0/"></a>版权声明：本文为博主原创文章，遵循 <a href="http://creativecommons.org/licenses/by-sa/4.0/">CC 4.0 BY-SA</a> 版权协议，转载请附上原文出处链接和本声明。</p>
<p>本文链接：<a href="https://blog.csdn.net/lyhhj/article/details/93757755">https://blog.csdn.net/lyhhj/article/details/93757755</a></p>
]]></summary>
        <content type="html"><![CDATA[<p><a href="http://creativecommons.org/licenses/by-sa/4.0/"></a>版权声明：本文为博主原创文章，遵循 <a href="http://creativecommons.org/licenses/by-sa/4.0/">CC 4.0 BY-SA</a> 版权协议，转载请附上原文出处链接和本声明。</p>
<p>本文链接：<a href="https://blog.csdn.net/lyhhj/article/details/93757755">https://blog.csdn.net/lyhhj/article/details/93757755</a></p>
<!-- more -->
<h1 id="1-背景">1. 背景</h1>
<blockquote>
<p>之前已经翻译过了Google官方的CodeLabs上面的教程，教程很详细，代码在Github上也可以找到，本篇文章旨在自己的APP上使用效果及演示Demo，来具体的使用Navigation。并且对其进行源码解析。</p>
</blockquote>
<p>基本相关介绍可以查看我之前翻译的文章，基本就是google翻译了一个大概。</p>
<p><a href="https://juejin.im/post/5cf37caee51d45777621bb2b">一、Android Jetpack_Note_CodeLabs一Navigation</a></p>
<h1 id="2-基本使用">2. 基本使用</h1>
<blockquote>
<p>虽然在之前的文章中已经很详细的介绍了<code>Navigation</code>，但是这里也简单的叙述一下我在项目中的具体使用：</p>
</blockquote>
<h2 id="21-navigationdrawerlayouttoolbar">2.1 Navigation+DrawerLayout+ToolBar</h2>
<p>我们可以通过使用<code>Navigation</code> 配合<code>DrawerLayout</code>侧边栏和<code>Toolbar</code>标题来进行工作，不再需要我们去定义点击事件，也不需要我们去管理Fragment做切换，只需要我们做相关的配置和极少量的代码就可以了。</p>
<h3 id="211-drawerlayout">2.1.1 DrawerLayout</h3>
<p>侧边栏的用法和我们之前的使用一样，配置好我们<code>NavigationView</code>里面的<code>_headerLayout_</code><em>、</em><code>_menu_</code><em>即可；</em></p>
<blockquote>
<p>**注意：**这里面的menu有一点和我们之前的不一样，item的id必须要和navigation里面的fragment的id相同，否则点击事件不生效，这里先提一下，下面会详细介绍。</p>
</blockquote>
<h3 id="212-toolbar和navhostfragment">2.1.2 ToolBar和NavHostFragment</h3>
<p><code>DrawerLayout</code>配置好之后，我们再来配置标题栏，之前我们的用法都是在中间加一个存放<code>Fragment</code>的容器，有可能是<code>FrameLayout</code>、<code>ViewPager</code>等，这里面我们需要配置一个<code>Fragment</code>，这个<code>Fragment</code>的<strong>name</strong>是<code>androidx.navigation.fragment.NavHostFragment</code>，这是一个添加到布局中的特殊部件，<strong>NavHostFragment</strong>通过<strong>navGraph</strong>与<strong>navigation</strong>导航编辑器进行关联。具体代码如下：</p>
<pre><code>&lt;androidx.drawerlayout.widget.DrawerLayout
            xmlns:tools=&quot;http://schemas.android.com/tools&quot;
            android:id=&quot;@+id/drawer_layout&quot;
            android:layout_width=&quot;match_parent&quot;
            android:layout_height=&quot;match_parent&quot;
            android:fitsSystemWindows=&quot;true&quot;
            tools:openDrawer=&quot;start&quot;&gt;
        &lt;LinearLayout
                android:layout_width=&quot;match_parent&quot;
                android:layout_height=&quot;match_parent&quot;
                android:orientation=&quot;vertical&quot;&gt;
            &lt;com.google.android.material.appbar.AppBarLayout
                    android:layout_height=&quot;wrap_content&quot;
                    android:layout_width=&quot;match_parent&quot;
                    android:theme=&quot;@style/AppTheme.AppBarOverlay&quot;&gt;

                &lt;androidx.appcompat.widget.Toolbar
                        android:id=&quot;@+id/toolbar&quot;
                        android:layout_width=&quot;match_parent&quot;
                        android:layout_height=&quot;?attr/actionBarSize&quot;
                        android:background=&quot;?attr/colorPrimary&quot;
                        android:theme=&quot;@style/AppTheme.PopupOverlay&quot;
                /&gt;

            &lt;/com.google.android.material.appbar.AppBarLayout&gt;

            &lt;fragment
                    android:id=&quot;@+id/fragment_home&quot;
                    android:name=&quot;androidx.navigation.fragment.NavHostFragment&quot;
                    android:layout_width=&quot;match_parent&quot;
                    android:layout_height=&quot;match_parent&quot;
                    app:defaultNavHost=&quot;true&quot;
                    app:navGraph=&quot;@navigation/navigation_main&quot;/&gt;
        &lt;/LinearLayout&gt;

        &lt;com.google.android.material.navigation.NavigationView
                app:itemIconTint=&quot;@color/nav_item_txt&quot;
                app:itemTextColor=&quot;@color/nav_item_txt&quot;
                android:id=&quot;@+id/nav_view&quot;
                android:layout_width=&quot;wrap_content&quot;
                android:layout_height=&quot;match_parent&quot;
                android:layout_gravity=&quot;start&quot;
                android:fitsSystemWindows=&quot;true&quot;
                app:headerLayout=&quot;@layout/nav_header_main&quot;
                app:menu=&quot;@menu/activity_main_drawer&quot;/&gt;

    &lt;/androidx.drawerlayout.widget.DrawerLayout&gt;
</code></pre>
<p>我们可以看到<strong>NavHostFragment</strong>中有两个属性比较特殊：<code>app:defaultNavHost</code>和<code>app:navGraph=&quot;@navigation/navigation_main&quot;</code>，前者就是是否是默认的其实页面，后者就是我们要设计的Navigation布局文件.</p>
<h3 id="213-navigation_mainxml">2.1.3 navigation_main.xml</h3>
<p>在<code>Android Studio</code>3.2版本以上里面内嵌了<code>Navigation</code>的设计面板工具，我们可以在res文件夹下面的<code>navigation</code>文件里面对我们的fragment/Activity进行设计。</p>
<figure data-type="image" tabindex="1"><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4ubmxhcmsuY29tL3l1cXVlLzAvMjAxOS9wbmcvMjc5NTA1LzE1NTk1NTM0NzQ3ODMtNzBlMGI3ODItNDNlYy00YTE3LTkyZTYtZTZkOWZmMDZmOTljLnBuZw#align=left&amp;display=inline&amp;height=152&amp;name=WeChatf84276a636246413fd559699a8c1e759.png&amp;originHeight=202&amp;originWidth=546&amp;size=27542&amp;status=done&amp;width=410" alt="WeChatf84276a636246413fd559699a8c1e759.png"></figure>
<p>打开<strong>Desgin</strong>面板，进入设计模式，在里面我们可以新建我们的目标页面。如果你还没创建过一个**Destination，**你可以点击<code>create a destination</code>创建一个<code>Fragmengt/Activity</code>。当然如果你之前已经创建好了的话，在这里你可以直接选择：</p>
<figure data-type="image" tabindex="2"><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4ubmxhcmsuY29tL3l1cXVlLzAvMjAxOS9wbmcvMjc5NTA1LzE1NTk1NTM3MDU4ODQtNDNkYTg1ZGMtNmQ0OC00NmY0LWFmMjktOGRkZDQwMTZhZmVkLnBuZw#align=left&amp;display=inline&amp;height=429&amp;name=WeChat224344cdf31a9c4010f08da7cdf8f45e.png&amp;originHeight=858&amp;originWidth=1196&amp;size=147391&amp;status=done&amp;width=598" alt="WeChat224344cdf31a9c4010f08da7cdf8f45e.png"></figure>
<p>选择完一个<strong>Destination</strong>之后，在面板中就可以看到了，具体的action、arguments就不介绍了，详细的可以看之前的文章。</p>
<p>打开<strong>Text</strong>模式的xml我们可以看到我们选择的Fragmengt配置信息，当然你也可以不通过面板设计，也可以直接在xml里进行代码编写。<br>
<code>startDestination</code>是APP默认启动的页面，这里面必须要指定，否则会报错crash。这里我的代码所指默认页面是<code>HomeFragment</code>，如下：</p>
<pre><code>&lt;navigation xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;
            xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;
            xmlns:tools=&quot;http://schemas.android.com/tools&quot;
            android:id=&quot;@+id/navigation_main&quot;
            app:startDestination=&quot;@+id/homeFragment&quot;
            tools:ignore=&quot;UnusedNavigation&quot;&gt;
  
 &lt;fragment android:id=&quot;@+id/homeFragment&quot;
              android:name=&quot;com.hankkin.jetpack_note.ui.home.HomeFragment&quot;
              android:label=&quot;@string/menu_home&quot;&gt;
        &lt;action android:id=&quot;@+id/action_navigationFragment_to_webFragment&quot;
                app:destination=&quot;@id/webFragment&quot;
                app:enterAnim=&quot;@anim/slide_in_right&quot;
                app:exitAnim=&quot;@anim/slide_out_left&quot;
                app:popEnterAnim=&quot;@anim/slide_in_left&quot;
                app:popExitAnim=&quot;@anim/slide_out_right&quot;/&gt;
    &lt;/fragment&gt;

    &lt;fragment android:id=&quot;@+id/codeFragment&quot;
              android:name=&quot;com.hankkin.jetpack_note.ui.CodeFragment&quot;
              android:label=&quot;@string/menu_code&quot;/&gt;
</code></pre>
<p>我们可以看到上面的布局代码 默认的起始页面是homeFragment，下面还有一个codeFragment，其实这两个fragment也就是对应着在menu中的两个菜单，同时也对应我们侧边栏中的一个<strong>首页</strong>和一个<strong>代码页，</strong></p>
<pre><code>&lt;item
                android:id=&quot;@+id/homeFragment&quot;
                android:icon=&quot;@drawable/ic_menu_home&quot;
                android:title=&quot;@string/menu_home&quot;/&gt;
        &lt;item
                android:id=&quot;@+id/codeFragment&quot;
                android:icon=&quot;@drawable/ic_menu_code&quot;
                android:title=&quot;@string/menu_code&quot;/&gt;
</code></pre>
<blockquote>
<p>还记得上面说的id要相同吗？就是上面<strong>item的id</strong>要和<strong>navigation_main.xml</strong>中fragment的id相同，否则点击菜单不会切换fragment的。</p>
</blockquote>
<p>配置完上面这些信息之后，怎么将他们绑定起来使用呢？</p>
<h3 id="214-navcontroller">2.1.4 NavController</h3>
<p>先看下代码：</p>
<pre><code>		navController = Navigation.findNavController(this, R.id.fragment_home)
        appBarConfiguration = AppBarConfiguration(setOf(R.id.homeFragment, R.id.codeFragment), drawerLayout)
        // Set up ActionBar
        setSupportActionBar(mDataBinding.toolbar)
        setupActionBarWithNavController(navController, appBarConfiguration)
        // Set up navigation menu
        mDataBinding.navView.setupWithNavController(navController)
</code></pre>
<ul>
<li>我们通过findNavController传入之前定义好的装载fragment的容器id（也就是之前定义的NavHostFragment）找到了Navigation对应的navController；</li>
<li>通过配置一个AppBarConfiguration，AppBarConfiguration 里传入了一个id的set集合和drawerlayout，id的集合就是我们在**navigation_main.xml **定义的fragment id</li>
<li>最后通过设置setupActionBarWithNavController、setupWithNavController进行关联绑定</li>
</ul>
<blockquote>
<p>到此，我们的基本配置就结束了，可以看到我们drawerlayout中的首页和代码按钮点击会切换对应的fragment，同时toolbar的汉堡按钮和返回按钮也会自动切换；当然Navigation还可以配合BottomNavigationView使用。</p>
</blockquote>
<h2 id="22-bottomnavigationview使用">2.2 BottomNavigationView使用</h2>
<h3 id="221-配置文件">2.2.1 配置文件</h3>
<p>和上面的步骤类似：也是配置好 navigation.xml布局以及 BottomNavigationView所对应的menu菜单文件</p>
<h3 id="222-setupwithnavcontroller">2.2.2 setupWithNavController</h3>
<p>当然BottomNavigationView也提供了扩展方法setupWithNavController去绑定菜单和fragment，这里使用很简单就不具体介绍了。详情可见<a href="https://github.com/Hankkin/JetPack_Note/blob/master/app/src/main/java/com/hankkin/jetpack_note/ui/navigation/BottomNavSampleActivity.kt">BottomNavSampleActivity</a>。</p>
<h2 id="23-action跳转及传餐">2.3 Action跳转及传餐</h2>
<h3 id="231-action跳转">2.3.1 Action跳转</h3>
<p>先看一下navigation的Desgin模式：</p>
<figure data-type="image" tabindex="3"><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4ubmxhcmsuY29tL3l1cXVlLzAvMjAxOS9wbmcvMjc5NTA1LzE1NTk2MzQ4MzIwNDUtMTZmYzY0ZWItOTI3MS00MTAwLWEyOTMtM2I4MDg5M2UzMWEzLnBuZw#align=left&amp;display=inline&amp;height=348&amp;name=image.png&amp;originHeight=695&amp;originWidth=747&amp;size=159060&amp;status=done&amp;width=374" alt="image.png"></figure>
<p>可能你会注意到这些线是什么？没错这就是一个一个的<strong>Action</strong>，当你手动将两个Fragment进行连线后，在xml布局里面会对应生成一个标签，例如：</p>
<pre><code>&lt;action android:id=&quot;@+id/action_dashBoardSampleFragment_to_notificationSampleFragment&quot;
                app:destination=&quot;@id/notificationSampleFragment&quot;/&gt;
</code></pre>
<p>它会自动创建好id，id有可能比较长，但是确很清楚，从xtoy的模式，当然如果你不喜欢可以自己改，destination则是我们要跳转到的目标接界面。</p>
<p>action设置好了之后，我们可以执行下面代码进行跳转：</p>
<pre><code>findNavController().navigate(R.id.action_homeSampleFragment_to_dashBoardSampleFragment_action)
</code></pre>
<h3 id="232-navoptions切换动画">2.3.2 NavOptions切换动画</h3>
<p>当然fragment之间的切换是支持动画的，NavOptions是一个动画管理类，我们可以设置进入和回退的动画，设置的方式有两种：</p>
<ol>
<li>
<p>直接在标签中设置动画</p>
<p><action android:id="@+id/action_homeSampleFragment_to_dashBoardSampleFragment_action"
                app:destination="@id/dashBoardSampleFragment"
                app:enterAnim="@anim/slide_in_right"
                app:exitAnim="@anim/slide_out_left"
                app:popEnterAnim="@anim/slide_in_left"
                app:popExitAnim="@anim/slide_out_right"/></p>
</li>
<li>
<p>通过NavOptions设置动画</p>
<p>val options = navOptions {<br>
anim {<br>
enter = R.anim.slide_in_right<br>
exit = R.anim.slide_out_left<br>
popEnter = R.anim.slide_in_left<br>
popExit = R.anim.slide_out_right<br>
}<br>
}<br>
view.findViewById &lt; Button &gt;(R.id.navigate_destination_button)?.setOnClickListener {<br>
findNavController().navigate(R.id.flow_step_one_dest, null, options)<br>
}</p>
</li>
</ol>
<h3 id="233-参数传递">2.3.3 参数传递</h3>
<p>fragment之间的切换参数传递的方法也很简单，之前我们可能要通过宿主Activity或者接口等方法，总之挺麻烦的，下面我们看看通过Navigation控制的Fragment之间怎么传递？</p>
<p>我们可以在naviagtion布局中使用标签，</p>
<ul>
<li>
<p>name是我们传参的key</p>
</li>
<li>
<p>argType是参数类型</p>
</li>
<li>
<p>defaultValue默认值</p>
</li>
<li>
<p>nullable 是否可空</p>
<p><argument
         android:name="deep_args"
         app:argType=""
         android:defaultValue=""
         app:nullable=""/></p>
</li>
</ul>
<blockquote>
<p>**注意：**当然type类型也支持我们自定的实体类，但是需要你填写类的全路径，同时你要保证实体类实现了序列化</p>
</blockquote>
<p>我们可以通过把参数传递封装到Bundle中，然后再执行navigate()方法时传递过去，例如：</p>
<pre><code>val args = Bundle()
args.putString(&quot;link&quot;,&quot;1&quot;)
args.putString(&quot;title&quot;,&quot;1&quot;)
it.findNavController().navigate(R.id.webFragment, args)
</code></pre>
<p>当然你在接受是也可以通过getArguments().getString(xxxx)这种方式去获取，但是Navigation组件还提供给了我们更简单的方式，当你设置了标签后，通过编译代码，会自动为我们生成一个<strong>XXXFragmentDirections</strong>类，它里面为我们作了参数的封装，而NavController的navigate()方法同时支持direction类型的传递。</p>
<pre><code>val direction = HomeFragmentDirections.actionNavigationFragmentToWebFragment(link,title)
it.findNavController().navigate(direction)
</code></pre>
<p>同时在我们的目标页面所对应了一个XXXFragmentArgs，我们可以直接拿到navArgs()从这里我们可以直接拿到参数。</p>
<pre><code>private val args: WebFragmentArgs by navArgs()
</code></pre>
<h2 id="24-deep-link">2.4 Deep Link</h2>
<p>关于Deep Link 是指跳入应用内的一个功能，我就把它翻译成深层链接了，Navigation提供了这样一个功能，使用起来也很简单：</p>
<pre><code>            val args = Bundle()
            args.putString(&quot;deep_args&quot;,et_deep_link.text.toString())
            val deep = findNavController().createDeepLink()
                .setDestination(R.id.notificationSampleFragment)
                .setArguments(args)
                .createPendingIntent()

            val notificationManager =
                context?.getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager
            if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.O) {
                notificationManager.createNotificationChannel(
                    NotificationChannel(
                        &quot;deeplink&quot;, &quot;Deep Links&quot;, NotificationManager.IMPORTANCE_HIGH)
                )
            }
            val builder = NotificationCompat.Builder(
                context!!, &quot;deeplink&quot;)
                .setContentTitle(resources.getString(R.string.app_name))
                .setContentText(&quot;Navigation 深层链接测试&quot;)
                .setSmallIcon(R.mipmap.jetpack)
                .setContentIntent(deep)
                .setAutoCancel(true)
            notificationManager.notify(0, builder.build())
</code></pre>
<p>我们可以创建一个DeepLink，带上参数，通过Notification通知来测试这样的效果，可以直接跳到项目中的该页面。<br>
具体可查看<a href="https://github.com/Hankkin/JetPack_Note/blob/master/app/src/main/java/com/hankkin/jetpack_note/ui/navigation/SampleNotificationFragment.kt">SampleNotificationFragment</a>。</p>
<h1 id="3-源码解析">3. 源码解析</h1>
<h3 id="31-navhostfragment">3.1 NavHostFragment</h3>
<blockquote>
<p>官网上是这样介绍它的：NavHostFragment provides an area within your layout for self-contained navigation to occur. 大致意思就是NavHostFragment在布局中提供了一个区域，用于进行包含导航</p>
</blockquote>
<p>接下来我们看一下它的源码：</p>
<pre><code>public class NavHostFragment extends Fragment implements NavHost {
    @CallSuper
    @Override
    public void onAttach(@NonNull Context context) {
        super.onAttach(context);
        if (mDefaultNavHost) {
            requireFragmentManager().beginTransaction()
                    .setPrimaryNavigationFragment(this)
                    .commit();
        }
    }
}
</code></pre>
<p>可以看到它就是一个<code>Fragment</code>，在<code>onAttach</code>生命周期开启事务将它自己设置成了PrimaryFragment了，当然通过<code>defaultNavHost</code>条件判断的，这个布尔值看着眼熟吗？没错，就是我们在xml布局中设置的那一个。</p>
<pre><code>					&lt;fragment
                    android:id=&quot;@+id/fragment_home&quot;
                    android:name=&quot;androidx.navigation.fragment.NavHostFragment&quot;
                    android:layout_width=&quot;match_parent&quot;
                    android:layout_height=&quot;match_parent&quot;
                    app:defaultNavHost=&quot;true&quot;
                    app:navGraph=&quot;@navigation/navigation_main&quot;/&gt;
</code></pre>
<p>接着看它的<code>onCreate</code>生命周期</p>
<pre><code>    @CallSuper
    @Override
    public void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        final Context context = requireContext();

        mNavController = new NavController(context);
        mNavController.getNavigatorProvider().addNavigator(createFragmentNavigator());

       	.......

        if (navState != null) {
            // Navigation controller state overrides arguments
            mNavController.restoreState(navState);
        }
        if (mGraphId != 0) {
            // Set from onInflate()
            mNavController.setGraph(mGraphId);
        } else {
            // See if it was set by NavHostFragment.create()
            final Bundle args = getArguments();
            final int graphId = args != null ? args.getInt(KEY_GRAPH_ID) : 0;
            final Bundle startDestinationArgs = args != null
                    ? args.getBundle(KEY_START_DESTINATION_ARGS)
                    : null;
            if (graphId != 0) {
                mNavController.setGraph(graphId, startDestinationArgs);
            }
        }
    }
</code></pre>
<p>我们看到在<code>onCreate</code>生命周期中创建了一个<code>NavController</code>，并且为这个<code>NavController</code>创建了一个<code>_Navigator_</code>_添加了进去，_我们跟踪<code>createFragmentNavigator</code>，发现它创建了一个<code>FragmentNavigator</code>，这个类是做什么的呢？它继承了Navigator，查看注释我们知道它是为每个Navigation设置策略的，也就是说Fragment之间通过导航切换都是由它来操作的，下面会详细介绍的，这里先简单看下。<br>
接下来我们看到为<code>NavController</code>设置了<code>setGraph()</code>，也就是我们xml里面定义的<code>navGraph</code>，导航布局里面的<code>Fragment</code>及<code>action</code>跳转等信息。</p>
<p>还有就是onCreateView、onViewCreated等生命周期方法，基本就是加载布局设置ID的方法了。</p>
<p>下面我们跟到NavController.setGraph()中看下是怎样将我们设计的fragment添加进去的？</p>
<h3 id="32-navcontroller">3.2 NavController</h3>
<pre><code>/**
     * Sets the {@link NavGraph navigation graph} to the specified graph.
     * Any current navigation graph data (including back stack) will be replaced.
     *
     * &lt;p&gt;The graph can be retrieved later via {@link #getGraph()}.&lt;/p&gt;
     *
     * @param graph graph to set
     * @see #setGraph(int, Bundle)
     * @see #getGraph
     */
    @CallSuper
    public void setGraph(@NonNull NavGraph graph, @Nullable Bundle startDestinationArgs) {
        if (mGraph != null) {
            // Pop everything from the old graph off the back stack
            popBackStackInternal(mGraph.getId(), true);
        }
        mGraph = graph;
        onGraphCreated(startDestinationArgs);
    }
</code></pre>
<p>我们看如果设置的graph不为null，它执行了popBackStackInternal，看注释的意思为从之前的就的graph栈弹出所有的graph：</p>
<pre><code>boolean popBackStackInternal(@IdRes int destinationId, boolean inclusive) {
        .....
        .....
        boolean popped = false;
        for (Navigator navigator : popOperations) {
            if (navigator.popBackStack()) {
                mBackStack.removeLast();
                popped = true;
            } else {
                // The pop did not complete successfully, so stop immediately
                break;
            }
        }
        return popped;
    }
</code></pre>
<p>果真remove掉了之前所有的naviagtor。而这个mBackStack是什么时候添加的navigator的呢？查看源码我们发现：</p>
<pre><code>private void navigate(@NonNull NavDestination node, @Nullable Bundle args,
            @Nullable NavOptions navOptions, @Nullable Navigator.Extras navigatorExtras) {
        boolean popped = false;
        if (navOptions != null) {
            if (navOptions.getPopUpTo() != -1) {
                popped = popBackStackInternal(navOptions.getPopUpTo(),
                        navOptions.isPopUpToInclusive());
            }
        }
        Navigator&lt;NavDestination&gt; navigator = mNavigatorProvider.getNavigator(
                node.getNavigatorName());
        Bundle finalArgs = node.addInDefaultArgs(args);
        NavDestination newDest = navigator.navigate(node, finalArgs,
                navOptions, navigatorExtras);
        if (newDest != null) {
            // 如果NavGraph不在栈内，先拿到父类Navgarph
            ArrayDeque&lt;NavBackStackEntry&gt; hierarchy = new ArrayDeque&lt;&gt;();
            NavGraph parent = newDest.getParent();
            while (parent != null) {
                hierarchy.addFirst(new NavBackStackEntry(parent, finalArgs));
                parent = parent.getParent();
            }
            // 现在遍历后堆栈并查看哪些导航图已经在栈内
            Iterator&lt;NavBackStackEntry&gt; iterator = mBackStack.iterator();
            while (iterator.hasNext() &amp;&amp; !hierarchy.isEmpty()) {
                NavDestination destination = iterator.next().getDestination();
                if (destination.equals(hierarchy.getFirst().getDestination())) {
                    //destination 如果已经在栈顶，不需要再add了
                    hierarchy.removeFirst();
                }
            }
            // Add all of the remaining parent NavGraphs that aren't
            // already on the back stack
            mBackStack.addAll(hierarchy);
            //添加新的 destination
            NavBackStackEntry newBackStackEntry = new NavBackStackEntry(newDest, finalArgs);
            mBackStack.add(newBackStackEntry);
        }
        if (popped || newDest != null) {
            dispatchOnDestinationChanged();
        }
    }
</code></pre>
<p>还记得这个方法吗？我们一般手动切换Fragment时可以调用这个方法，最后就是跟踪到这里。</p>
<pre><code>findNavController().navigate(R.id.bottomNavSampleActivity)
</code></pre>
<p>同时，切换目标Fragment到栈顶。我们发现最后<code>dispatchOnDestinationChanged()</code>这个方法，分发目标界面切换。有必要去跟一下，你可能会发现意想不到的东西：</p>
<pre><code> /**
     * Dispatch changes to all OnDestinationChangedListeners.
     * &lt;p&gt;
     * If the back stack is empty, no events get dispatched.
     *
     * @return If changes were dispatched.
     */
    @SuppressWarnings(&quot;WeakerAccess&quot;) /* synthetic access */
    boolean dispatchOnDestinationChanged() {
        // We never want to leave NavGraphs on the top of the stack
        //noinspection StatementWithEmptyBody
        while (!mBackStack.isEmpty()
                &amp;&amp; mBackStack.peekLast().getDestination() instanceof NavGraph
                &amp;&amp; popBackStackInternal(mBackStack.peekLast().getDestination().getId(), true)) {
            // Keep popping
        }
        if (!mBackStack.isEmpty()) {
            NavBackStackEntry backStackEntry = mBackStack.peekLast();
            for (OnDestinationChangedListener listener :
                    mOnDestinationChangedListeners) {
                listener.onDestinationChanged(this, backStackEntry.getDestination(),
                        backStackEntry.getArguments());
            }
            return true;
        }
        return false;
    }
</code></pre>
<p>这里面分发了所有实现了<code>OnDestinationChangedListener</code>接口的方法，继续跟踪，看看都哪些实现了这个接口呢？</p>
<figure data-type="image" tabindex="4"><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4ubmxhcmsuY29tL3l1cXVlLzAvMjAxOS9wbmcvMjc5NTA1LzE1NTk2NjQwMDM5NDUtNGY2NWU4MjgtZWRlOC00M2VlLWI4NmItNjVlZmVkYzMwMTFhLnBuZw#align=left&amp;display=inline&amp;height=817&amp;name=image.png&amp;originHeight=817&amp;originWidth=1941&amp;size=315597&amp;status=done&amp;width=1941" alt="image.png"></figure>
<p>只有一个类实现了<strong>AbstractAppBarOnDestinationChangedListener</strong>，看一下具体实现：</p>
<pre><code>@Override
    public void onDestinationChanged(@NonNull NavController controller,
            @NonNull NavDestination destination, @Nullable Bundle arguments) {
        DrawerLayout drawerLayout = mDrawerLayoutWeakReference != null
                ? mDrawerLayoutWeakReference.get()
                : null;
        if (mDrawerLayoutWeakReference != null &amp;&amp; drawerLayout == null) {
            controller.removeOnDestinationChangedListener(this);
            return;
        }
        CharSequence label = destination.getLabel();
        if (!TextUtils.isEmpty(label)) {
            ......
            ......
            matcher.appendTail(title);
            //设置title
            setTitle(title);
        }
        boolean isTopLevelDestination = NavigationUI.matchDestinations(destination,
                mTopLevelDestinations);
        if (drawerLayout == null &amp;&amp; isTopLevelDestination) {
            //设置icon
            setNavigationIcon(null, 0);
        } else {
            //设置返回箭头状态
            setActionBarUpIndicator(drawerLayout != null &amp;&amp; isTopLevelDestination);
        }
    }
</code></pre>
<p>原来如此，到这里就应该清楚了，当我们切换Fragment时，大概流程如下：</p>
<ol>
<li>切换目标fragment到栈顶</li>
<li>分发目标Fragment切换状态</li>
<li>设置toolbar的标题、icon状态等</li>
<li>当然setTitle()、setNavigationIcon()等都为抽象方法，具体实现可以看子类里是怎么实现的，具体就不叙述了</li>
</ol>
<blockquote>
<p>到这里，基本的几个核心类以及相关实现我们基本了解了，下面我们看一下基本的流程，首先我们从入口进去，一点点跟进</p>
</blockquote>
<h3 id="33-navigationfindnavcontrollerthis-ridfragment_home">3.3 Navigation.findNavController(this, R.id.fragment_home)</h3>
<p>我们在最开始会初始化一个NavController：</p>
<pre><code>@NonNull
    public static NavController findNavController(@NonNull Activity activity, @IdRes int viewId) {
        View view = ActivityCompat.requireViewById(activity, viewId);
        NavController navController = findViewNavController(view);
        .......
        return navController;
    }

@Nullable
    private static NavController findViewNavController(@NonNull View view) {
        while (view != null) {
            NavController controller = getViewNavController(view);
            .........
        }
        return null;
    }

@SuppressWarnings(&quot;unchecked&quot;)
    @Nullable
    private static NavController getViewNavController(@NonNull View view) {
        Object tag = view.getTag(R.id.nav_controller_view_tag);
        NavController controller = null;
        if (tag instanceof WeakReference) {
            controller = ((WeakReference&lt;NavController&gt;) tag).get();
        } else if (tag instanceof NavController) {
            controller = (NavController) tag;
        }
        return controller;
    }
</code></pre>
<p>查看代码可以看到是通过一个tag值来找到的，那么什么时候设置的呢？还记得3.1里面介绍的<code>NavHostFragment</code>的生命周期<code>onViewCreated</code>么？</p>
<pre><code>@Override
    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {
        super.onViewCreated(view, savedInstanceState);
        .......
        View rootView = view.getParent() != null ? (View) view.getParent() : view;
        Navigation.setViewNavController(rootView, mNavController);
    }
</code></pre>
<p>在视图创建的时候调用了<code>Naviagtion.setViewNavController()</code>。NavController初始化好了之后，接下来将它和<strong>NavigationView</strong>、<strong>ToolBar</strong>、<strong>BottomNavigationView</strong>、<strong>DrawerLayout</strong>进行绑定：</p>
<h3 id="34-setupactionbarwithnavcontroller">3.4 setupActionBarWithNavController</h3>
<p>不管是<code>NavigationView</code>还是<code>Bottom``NavigationView</code>，都会调用这个方法，他是<code>AppCompatActivity</code>的一个扩展方法，调用的是NavigationUI这个类：</p>
<pre><code>public static void setupActionBarWithNavController(@NonNull AppCompatActivity activity,
            @NonNull NavController navController,
            @NonNull AppBarConfiguration configuration) {
        navController.addOnDestinationChangedListener(
                new ActionBarOnDestinationChangedListener(activity, configuration));
    }
</code></pre>
<p>可以看到它就是调用了目标切换的那个接口，用来实现标题按钮等状态的改变。查看它的方法实现：</p>
<figure data-type="image" tabindex="5"><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4ubmxhcmsuY29tL3l1cXVlLzAvMjAxOS9wbmcvMjc5NTA1LzE1NTk2NjYyNjY1MjItMDFhOTc2YTEtN2I0Ni00OWMwLTljYzEtNmFlZjZjMjNlN2ZhLnBuZw#align=left&amp;display=inline&amp;height=697&amp;name=image.png&amp;originHeight=1393&amp;originWidth=1151&amp;size=265848&amp;status=done&amp;width=576" alt="image.png"></figure>
<p>我们看到它重载了很多方法，包括我们上面提到的<strong>NavigationView</strong>、<strong>ToolBar</strong>、<strong>BottomNavigationView</strong>、<strong>DrawerLayout</strong>。这样就将组件的状态切换绑定起来了，当fragment切换时，上面提到的接口分发，去切换布局按钮等状态。</p>
<h3 id="35-navviewsetupwithnavcontrollernavcontroller">3.5 navView.setupWithNavController(navController)</h3>
<pre><code>public static void setupWithNavController(@NonNull final NavigationView navigationView,
            @NonNull final NavController navController) {
        navigationView.setNavigationItemSelectedListener(
                new NavigationView.OnNavigationItemSelectedListener() {
                    @Override
                    public boolean onNavigationItemSelected(@NonNull MenuItem item) {
                        //目标页面是否被选中
                        boolean handled = onNavDestinationSelected(item, navController);
                        if (handled) {
                            //切换菜单状态、关闭抽屉
                            ViewParent parent = navigationView.getParent();
                            if (parent instanceof DrawerLayout) {
                                ((DrawerLayout) parent).closeDrawer(navigationView);
                            } else {
                                BottomSheetBehavior bottomSheetBehavior =
                                        findBottomSheetBehavior(navigationView);
                                if (bottomSheetBehavior != null) {
                                    bottomSheetBehavior.setState(BottomSheetBehavior.STATE_HIDDEN);
                                }
                            }
                        }
                        return handled;
                    }
                });
        final WeakReference&lt;NavigationView&gt; weakReference = new WeakReference&lt;&gt;(navigationView);
        navController.addOnDestinationChangedListener(
                new NavController.OnDestinationChangedListener() {
                    @Override
                    public void onDestinationChanged(@NonNull NavController controller,
                            @NonNull NavDestination destination, @Nullable Bundle arguments) {
                        NavigationView view = weakReference.get();
                        if (view == null) {
                            navController.removeOnDestinationChangedListener(this);
                            return;
                        }
                        Menu menu = view.getMenu();
                        for (int h = 0, size = menu.size(); h &lt; size; h++) {
                            MenuItem item = menu.getItem(h);
                            item.setChecked(matchDestination(destination, item.getItemId()));
                        }
                    }
                });
    }
</code></pre>
<p>最后就是状态切换了，当点击menu菜单或者目标Fragment切换的时候，改变状态。</p>
<h3 id="36-遗留问题">3.6 遗留问题</h3>
<p><strong>遗留：<strong>还记得上面说的那个在设置menu菜单栏的item的ID要和navigation.xml里fragment的ID相同么？至于为什么要这么做，我们看上面的第一段代码：跟踪</strong>onNavDestinationSelected()：</strong></p>
<pre><code>public static boolean onNavDestinationSelected(@NonNull MenuItem item,
            @NonNull NavController navController) {
       	.......
        .......
        if ((item.getOrder() &amp; Menu.CATEGORY_SECONDARY) == 0) {
            builder.setPopUpTo(findStartDestination(navController.getGraph()).getId(), false);
        }
        NavOptions options = builder.build();
        try {
            //TODO provide proper API instead of using Exceptions as Control-Flow.
            navController.navigate(item.getItemId(), null, options);
            return true;
        } catch (IllegalArgumentException e) {
            return false;
        }
    }
</code></pre>
<p>我们看到最后还是调用navigate()方法,并且将MenuItem的ID作为参数传递过去：</p>
<pre><code>public void navigate(@IdRes int resId, @Nullable Bundle args, @Nullable NavOptions navOptions,
            @Nullable Navigator.Extras navigatorExtras) {
        NavDestination currentNode = mBackStack.isEmpty()
                ? mGraph
                : mBackStack.getLast().getDestination();
        if (currentNode == null) {
            throw new IllegalStateException(&quot;no current navigation node&quot;);
        }
        @IdRes int destId = resId;
        ......
        ......
        //根据menu id查询目标页面
        NavDestination node = findDestination(destId);
        if (node == null) {
            final String dest = NavDestination.getDisplayName(mContext, destId);
            throw new IllegalArgumentException(&quot;navigation destination &quot; + dest
                    + (navAction != null
                    ? &quot; referenced from action &quot; + NavDestination.getDisplayName(mContext, resId)
                    : &quot;&quot;)
                    + &quot; is unknown to this NavController&quot;);
        }
        navigate(node, combinedArgs, navOptions, navigatorExtras);
    }
</code></pre>
<p><code>NavDestination node = findDestination(destId)</code>通过Menu Item的ID查询<strong>NavDestination：</strong><br>
**</p>
<pre><code>@SuppressWarnings(&quot;WeakerAccess&quot;) /* synthetic access */
    NavDestination findDestination(@IdRes int destinationId) {
        .......
        return currentGraph.findNode(destinationId);
    }

@Nullable
    final NavDestination findNode(@IdRes int resid, boolean searchParents) {
        NavDestination destination = mNodes.get(resid);
        // Search the parent for the NavDestination if it is not a child of this navigation graph
        // and searchParents is true
        return destination != null
                ? destination
                : searchParents &amp;&amp; getParent() != null ? getParent().findNode(resid) : null;
    }
</code></pre>
<p>而<strong>mNodes</strong>是一个SparseArrayCompat数组，而<strong>NavDestination</strong>中维护了navigation.xml中的每个fragment的相关信息：</p>
<figure data-type="image" tabindex="6"><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4ubmxhcmsuY29tL3l1cXVlLzAvMjAxOS9wbmcvMjc5NTA1LzE1NTk3MDQ2OTM5NjEtZjc0M2Y0ZTMtNDBhOS00ZWY4LWIwODMtMTFmMWMxZWExZGRlLnBuZw#align=left&amp;display=inline&amp;height=383&amp;name=image.png&amp;originHeight=765&amp;originWidth=1208&amp;size=377825&amp;status=done&amp;width=604" alt="image.png"></figure>
<p>在初始化的时候通过<code>addDestination()</code>放到数组mNodes中，而mId则就是我们的MenuItem的ID，所以很清楚了吧。</p>
<h2 id="4-总结">4. 总结</h2>
<h3 id="41-流程">4.1 流程</h3>
<ol>
<li>考虑到我们开始如果直接从<strong>setupWithNavController</strong> 入口进行分析的话，可能不太容易找到怎么创建的graph布局中的fragment，以及<strong>NavHostFragment</strong>到底是什么，所以我们先分析了布局中的**NavHostFragment，<strong>我们发现为什么要在布局中声明了一个</strong>NavHostFragment，**它是用来做什么的，最后发现在它的生命周期中创建了一个NavController，并且添加了FragmentNavigator，同时setGraph了。</li>
<li>紧接着我们通过setGraph进入到了<strong>NavController</strong>类中，通过graph里面设置的初始fragment看到了切换栈内切换Fragment的代码。</li>
<li>在里面我们看到了熟悉的<code>navigate()</code>方法，在里面dispatchOnDestinationChanged()吸引了我的注意力，通过查找，发现切换Fragment之后，通过该方法去改变布局的状态，也就是OnDestinationChangedListener接口。</li>
<li>到这里基本的代码实现已经了解的差不多了，然后我回到了入口，通过初始化NavController，调用NavigationUI中的方法绑定<strong>NavigationView</strong>、<strong>ToolBar</strong>、<strong>BottomNavigationView</strong>、<strong>DrawerLayout</strong>等布局，在调用<code>navigate()</code>方法后，改变状态，整个流程就走通了。</li>
</ol>
<blockquote>
<p>可能有一些不合理的地方，望大家见谅，但是这是我此次的一个基本流程。</p>
</blockquote>
<h3 id="42-类图">4.2 类图</h3>
<figure data-type="image" tabindex="7"><a href="http://lc-2hxprqvs.cn-n1.lcfile.com/55a8ef5cb455ed676f77/navigation.png"><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4ubmxhcmsuY29tL3l1cXVlLzAvMjAxOS9wbmcvMjc5NTA1LzE1NTk3MjgwNzI4MDEtZTRlMGMxOTUtZTRkMy00ODdjLTk0NjktYjZlZjc0YjU0OGZjLnBuZw#align=left&amp;display=inline&amp;height=560&amp;name=image.png&amp;originHeight=1024&amp;originWidth=1363&amp;size=146731&amp;status=done&amp;width=746" alt="image.png"></a></figure>
<h3 id="43-分析">4.3 分析</h3>
<h4 id="431-navhostfragment">4.3.1 <strong>NavHostFragment</strong></h4>
<p>我们在Activity的布局里面设置了<strong>NavHostFragment</strong>,同时设置了navGraph布局，经过上面的分析我们知道<strong>NavHostFragment</strong>中新建了NavController,并且创建了用来管理Fragment事务及切换的<strong>FragmentNavigator</strong>，可以简单的把它理解成连接Fragment和NavController的一个桥梁，同时也提供了包含导航的容器布局。</p>
<h4 id="432-navcontroller">4.3.2 NavController</h4>
<p>NavContorller是整个导航组件的核心，通过它来加载xml中fragment节点转化成<strong>NavDestination</strong>，并保存在栈内，通过navigate()方法切换栈内NavDestination，以做到fragment的切换操作。同时当fragment切换后，下发<strong>OnDestinationChanged</strong>接口，来改变NavgationView、BottomNavgationView、Menu等相关UI操作。</p>
<h4 id="433-navigationui">4.3.3 NavigationUI</h4>
<p>通过NavgationUI类，为各个View设置接口监听，将View的UI状态和NavController中的切换Fragment做了绑定。</p>
<blockquote>
<p>到这里整个Navgation组件的源码分析就结束了，大概的流程已经很清晰了，当然没有做到百分百，比如Deep Link部分，感兴趣的可以自行看一下，可以按照这个思路去真的看一下源码，看完之后你真的会对Navgation组件有更深的理解。当然你也可以参考CodeLabs中的Demo以及文档，也可以看我的Jepack_Note的代码，如有不对的地方，还望指出，谅解.</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[kotlin基础]]></title>
        <id>https://ouluqiang.github.io//post/kotlin-ji-chu</id>
        <link href="https://ouluqiang.github.io//post/kotlin-ji-chu">
        </link>
        <updated>2019-09-27T05:17:32.000Z</updated>
        <content type="html"><![CDATA[<h3 id="kotlin函数">kotlin函数</h3>
<p>main函数</p>
<pre><code>fun main(args:array&lt;String&gt;){
    
}
</code></pre>
<p>带参数带返回值</p>
<pre><code>fun sum(a:Int,b:Int):Int{
    return a+b
}
</code></pre>
<p>表达式做函数体，返回值类型自动推断的函数</p>
<pre><code>fun sum(a:Int,b:Int)=a+b
</code></pre>
<p>函数无返回值</p>
<pre><code>fun sum(a:Int,b:Int){
    println(&quot;sun is ${a+b}&quot;)
}
</code></pre>
<p>变量</p>
<p>val 只读</p>
<pre><code>val a:Int=1 //立即赋值
val b=2 //自动推断出int类型
val c:Int //类型
c=3  //明确赋值
</code></pre>
<p>var 读写</p>
<pre><code>var a=5
a+=1
</code></pre>
<p>注释跟java一样</p>
<p>表达式</p>
<pre><code>fun sum(a:Int,b:Int):Int{
    if(a&gt;b){
        return a
    }else{
        return b
    }
}
</code></pre>
<p>if作为表达式</p>
<pre><code>fun sum(a:Int,b:Int)=if(a&gt;b) a else b
</code></pre>
<p>可空值 null检测</p>
<p>变量的值可以为null，必须在声明处的类型后添加?标识该引用可以为空</p>
<p>str的值不是数字返回null</p>
<pre><code>fun parseInt(str:String):Int?{
    
}
</code></pre>
<p>使用返回可空值的函数</p>
<pre><code>fun parseInt(str:String):Int?{
    return str.toIntOrNull()
}

fun printInt(a:String,b:String){
    val x=parseInt(a)
    val y=parseInt(b)
    
    
    //直接使用x y 可能会报错，因为可能为空
    if(x!=null&amp;&amp;y!=null){
        println(x*y)
    }else{
        println(&quot;error&quot;)    
    }
    
    //或者检测空值，x y会自动转换成非空值
    if(x==null){
        println(&quot;error&quot;)
        return
    }
    if(y==null){
        println(&quot;error&quot;)
        return
    }
    println(x*y)
}
</code></pre>
<p>使用类型检测及自动类型转换</p>
<p>is运算符检测一个表达式是否某类型的一个实例，如果一个不可变的局部变量或属性已经判断出为某类型，检测后的分支中可以直接当作该类型使用，不需显示转换：</p>
<pre><code>fun getStringLength(obj:Any):Int?{
    if(obj is String){
        return obj.length
    }
    return null
}
</code></pre>
<p>或者</p>
<pre><code>fun getStringLength(obj:Any):Int?{
        if(obj !is String){
            return null
        }
        //自动转换为 string
        return obj.length
    }
    
fun getStringLength(obj:Any):Int?{
    if(obj is String&amp;&amp;obj.length&gt;0){
        return obj.length
    }
    return null
}
</code></pre>
<p>for循环.</p>
<pre><code>val list= listOf&lt;String&gt;(&quot;a&quot;,&quot;b&quot;,&quot;c&quot;)

//直接循环
for (l in list){
    println(l)
}

//根据下标找数据  
for (index in list.indices){
    println(&quot;index ${list[index]}&quot;)
}

//while循环  
var i=0
while (i&lt;list.size){
    println(&quot;while ${list[i]}&quot;)
    i++
}
</code></pre>
<p>when表达式</p>
<p>类似java的</p>
<pre><code>    switch (){
        case 0:
            break;
    }

fun getWhen(s:String):String?{
    when(s){
        &quot;a&quot;-&gt; return &quot;a1&quot;
        &quot;b&quot;-&gt; return &quot;b1&quot;
        &quot;c&quot;-&gt; return &quot;c1&quot;
    }
    return null
}
</code></pre>
<p>range 使用区间</p>
<pre><code>val x=1
val y=10
if (x in 1..y+1){
    println(&quot;range&quot;)
}
</code></pre>
<p>检测某个数字是否在区间内</p>
<pre><code>val list= arrayListOf&lt;String&gt;(&quot;a&quot;,&quot;b&quot;,&quot;c&quot;)
val i=-1
if (i !in 0..list.lastIndex){
    println(&quot;${i}&quot;)
}

//list.indices 指list 0..list.size-1的长度
if (list.size !in list.indices){
    println(&quot;${list.indices}---${list.size}&quot;)
}

//打印 0-10的数
//包含10
for (x in 0..10){
    println(x)
}
//不包含10
 for (x in  0 until 10){
    println(x)
}

//0-10中,顺序隔3个打印
for (x in 0..11 step 3){
    println(x)
}

//倒叙隔4个排序
for (x in 11 downTo 0 step 4){
    println(x)
}
</code></pre>
<p>循环迭代</p>
<pre><code>for (x in list){
    println(x)
}
</code></pre>
<p>用in判断集合是否包含实例</p>
<pre><code>//如果包含set就进判断，不走后续判断，类似java switch ()
val set= setOf&lt;String&gt;(&quot;aa&quot;,&quot;bb&quot;,&quot;cc&quot;)
when{
    &quot;a&quot; in set -&gt; println(&quot;这是 a&quot;)
    &quot;bb&quot; in set -&gt; println(&quot;这是 b&quot;)
    &quot;cc&quot; in set -&gt; println(&quot;这是 c&quot;)
}
</code></pre>
<p>用lambada过滤（filter）,映射（map）</p>
<pre><code>list.filter { it.startsWith(&quot;a&quot;) }
        .sortedBy { it }
        .map { it.toUpperCase() }
        .forEach { println(it) }
</code></pre>
<p>创建数据类</p>
<pre><code>data class UserBean(val uid:Int=0,var username:String?=null,var password:String?=null)
</code></pre>
<p>包含  get ,  set ,   toString , equals , hashCode , copy</p>
<p>函数参数默认值</p>
<pre><code>fun getWhen(s:String=&quot;&quot;,i:Int=0){}
</code></pre>
<p>过滤list</p>
<pre><code>val list= arrayListOf&lt;Int&gt;(1,2,3,41,5,16,5,3,21,1)
//val s=list.filter { x-&gt; x &gt; 9 }
val s=list.filter { it&gt;3}
for (l in s){
    println(l)
}
</code></pre>
<p>String内插</p>
<pre><code>println(&quot;${list.indices}---${list.size}&quot;)
</code></pre>
<p>类型判断</p>
<pre><code>when(s){
   is UserBean -&gt; return &quot;a1&quot;
    &quot;b&quot; -&gt; return &quot;b1&quot;
   is BaseBean&lt;*&gt; -&gt; return &quot;c1&quot;
}
</code></pre>
<p>map 遍历map</p>
<pre><code>val map= mapOf(&quot;a&quot; to &quot;aa&quot;,&quot;b&quot; to &quot;bb&quot;,&quot;c&quot; to &quot;cc&quot;)
for ((k,v) in map){
    println(&quot;${k}-----${v}&quot;)
}

//打印map的value
println(map[&quot;a&quot;])
//给map赋值
var map= HashMap&lt;String,String&gt;()
map[&quot;a&quot;]=&quot;asdfas&quot;
println(map[&quot;a&quot;])
</code></pre>
<p>lateinit 和 lazy 是 Kotlin 中的两种不同的延迟初始化的实现</p>
<pre><code>lateinit 只用于变量 var，而 lazy 只用于常量 val
</code></pre>
<p>创建单例模式</p>
<pre><code>//object修改类，为单例模式
object Bean{}
</code></pre>
<p>用 ? 修饰代表可以为null</p>
<pre><code>val file=File(&quot;T&quot;).listFiles()
println(file?.size)
</code></pre>
<p>kotlin 类型</p>
<pre><code>Double
Float
Long
Int
Short
Byte

Long类型在后面加L：  123L
Float类型在后面加F： 123F
</code></pre>
<p>kotlin 1.1起<br>
使用下划线使常量易读</p>
<pre><code>val a=1_000_000
val b=1_0000_0000L
val c=1_000.000_001
</code></pre>
<p>显式转换</p>
<pre><code>//a为int,b为long类型,编译不通过需要显式转换
if (a==b)

if (a==b.toInt()){}
</code></pre>
<p>运算</p>
<pre><code>位运算符只用 Int Long:

shl(bits) -有符号左移（java的&lt;&lt;）
shr(bits) -有符号右移（java的&gt;&gt;）
ushr(bits) -无符号右移（java的&gt;&gt;&gt;）
and(bits) -位与
or(bits) -位或
xor(bits) -位异或
inv() -位非
</code></pre>
<p>字符 char</p>
<pre><code>//char显示转换 int
val s='1'
s.toInt()
</code></pre>
<p>Boolean</p>
<pre><code>||    或
&amp;&amp;    与
!     非
</code></pre>
<p>数组</p>
<pre><code>Array
</code></pre>
<p>字符串</p>
<pre><code>//字符串添加转义字符
val s=&quot;hello\nworld&quot;
</code></pre>
<p>字符串模板</p>
<pre><code>// $
 val s=&quot;hello\nworld&quot;
val sa=&quot;x= ${s}&quot;
println(sa)
</code></pre>
<p>if 表达式</p>
<pre><code>if(true){
    
}elese{
    
}
</code></pre>
<p>when 表达式</p>
<pre><code>val s=1
//when取代了switch操作符
when(s){
    1 -&gt; println(&quot;aa&quot;)
    //多个分支放一起，用,分隔
    2,3 -&gt; println(&quot;bb&quot;)
    //用表达式做条件
    getInt() -&gt; println(&quot;cc&quot;)
    //检测是否在区间
    in 5..10 -&gt; println(&quot;dd&quot;)
    //其他分支不满足进else
    else -&gt;{
        println(&quot;else&quot;)
    }
}
</code></pre>
<p>for循环</p>
<p>while , do while</p>
<pre><code>while(s&gt;0){

}

do{
    val y=1
}while(y!=null)
</code></pre>
<p>返回和跳转</p>
<pre><code>return: 从最直接包围他的函数或匿名函数返回
break:终止直接包围他的循环
continue:继续下一次直接包围他的循环
</code></pre>
<p>类</p>
<pre><code>class修饰
</code></pre>
<p>构造函数</p>
<pre><code>//constructor主构造函数，一个或多个次构造函数  
//主构造函数有注解或可见性修饰符，不可以省略
//主构造函数可以省略，主构造函数不能包含任何代码
class Test constructor(string: String){

    //初始化块代码，主构造参数可以在init中使用
    init {

    }


class Test(val string: String,age:Int) {

    //初始化块代码，主构造参数可以在init中使用
    init {

    }

    //次级构造函数,次级构造函数委托给主构造函数需要添加this
    constructor(s: String):this(s,0)
    }
}
</code></pre>
<p>创建类的实例</p>
<pre><code>//调用构造函数，kotlin没有new
val text=Test(&quot;a&quot;,0)
</code></pre>
<p>继承</p>
<pre><code>覆盖函数
覆盖属性
覆盖规则
下次再学    
</code></pre>
<p>抽象类</p>
<pre><code>abstract修饰
</code></pre>
<p>伴生对象</p>
<p>属性和字段</p>
<pre><code>属性用var是可变，val是只读

class Test(var string: String?=null,var age:Int?=0) 

//用其中某个属性，用名称引用他
val text=Test()
text.age
</code></pre>
<p>get set</p>
<p>幕后字段， 幕后属性，编译器常量，惰性初始化属性，覆盖属性，委托属性</p>
<p>接口</p>
<pre><code>用interface修饰
一个类或对象可以实现一个或多个接口
</code></pre>
<p>接口中的属性<br>
解决覆盖冲突</p>
<pre><code>interface A{
    fun getA(){
        println(&quot;a&quot;)
    }
}

interface B{
    fun getA(){
        println(&quot;ba&quot;)
    }
    fun getB(){
        println(&quot;bb&quot;)
    }
}

class C:A,B{
    override fun getA() {
        //TODO(&quot;not implemented&quot;) //To change body of created functions use File | Settings | File Templates.
        //指定实现哪个父类的接口
        super&lt;A&gt;.getA()
        super&lt;B&gt;.getA()
    }

    override fun getB() {
        super.getB()
    }

}
</code></pre>
<p>可见性修饰符</p>
<pre><code>默认是public
prublic 声明随处可见
private 声明的文件内可见，类内部可见
protected 不适用于顶层声明，和private一样+在子类中可见
internal 相同模块随处可见
</code></pre>
<p>构造函数</p>
<pre><code>//指定类的主构造函数的可见性，必须添加显示的 constrector

class Test private constructor(var string: String?=null,var age:Int?=0) 
</code></pre>
<p>默认所有构造函数是public</p>
<p>局部声明</p>
<pre><code>局部变量，函数和类不能有可见性修饰符
</code></pre>
<p>模块</p>
<pre><code>可见性修饰符 internal 只在相同模块内可见，一个模块是编译在一起的一套kotlin文件
一个idea模块
一个maven或者gradle项目
一次&lt;kotlinc&gt;Ant人物执行所编译的一套文件
</code></pre>
<p>扩展</p>
<p>扩展函数</p>
<p>扩展是静态解析</p>
<pre><code>（有空在学吧）
</code></pre>
<p>可空接收者</p>
<p>扩展属性</p>
<p>伴生对象的扩展</p>
<p>扩展的作用</p>
<p>扩展声明为成员</p>
<p>动机</p>
<pre><code>下次学
</code></pre>
<p>数据类</p>
<p>生成的类含有一个无参的构造函数，所有的属性必须指定默认值</p>
<pre><code>数据类标记为 data
data class Test (var string: String?=null,var age:Int?=0) 
</code></pre>
<p>复制</p>
<p>复制一个对象改变一些属性，保持其他属性不变</p>
<pre><code>var text=Test()
text.string=&quot;as&quot;
text.age=11
text=text.copy(age = 14)
println(text.toString())
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Android Studio 配置SVN，GIT]]></title>
        <id>https://ouluqiang.github.io//post/android-studio-pei-zhi-svngit</id>
        <link href="https://ouluqiang.github.io//post/android-studio-pei-zhi-svngit">
        </link>
        <updated>2019-09-24T09:56:27.000Z</updated>
        <content type="html"><![CDATA[<h1 id="svngit下载地址">svn,git下载地址</h1>
<pre><code>链接：https://pan.baidu.com/s/1C6hn1S-hBzdduEoIm7-4XA 
提取码：xktl 
</code></pre>
<h1 id="svn">SVN</h1>
<h2 id="svn安装需注意安装-command-line功能">svn安装需注意安装 command line功能</h2>
<figure data-type="image" tabindex="1"><img src="https://ouluqiang.github.io//post-images/1569568588046.png" alt=""></figure>
<p>在studio的File &gt; Settings &gt; Version Control &gt; Subversion 添加svn路径</p>
<figure data-type="image" tabindex="2"><img src="https://ouluqiang.github.io//post-images/1569568609300.png" alt=""></figure>
<h1 id="git">GIT</h1>
<p>在studio的File &gt; Settings &gt; Version Control &gt; Git 添加git路径，Test测试git版本</p>
<figure data-type="image" tabindex="3"><img src="https://ouluqiang.github.io//post-images/1569568633842.png" alt=""></figure>
<p>GitHub直接输入账号密码即可</p>
<figure data-type="image" tabindex="4"><img src="https://ouluqiang.github.io//post-images/1569568657529.png" alt=""></figure>
<h2 id="androidstudio-看不到svn的工具小图标">androidstudio 看不到svn的工具小图标</h2>
<p>先看androidstudio是否安装svn<br>
File &gt; Settings &gt; Plugins 搜索Subversion Integration</p>
<p>如果有Subversion Integration 则安装好svn工具；如果没有安装，则进行安装。</p>
<figure data-type="image" tabindex="5"><img src="https://ouluqiang.github.io//post-images/1569568783281.png" alt=""></figure>
<p>再选择Subversion即可</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Android Studio常用设置]]></title>
        <id>https://ouluqiang.github.io//post/android-studio-chang-yong-she-zhi</id>
        <link href="https://ouluqiang.github.io//post/android-studio-chang-yong-she-zhi">
        </link>
        <updated>2019-09-24T09:19:41.000Z</updated>
        <content type="html"><![CDATA[<h2 id="1设置编辑界面和代码主题">1.设置编辑界面和代码主题</h2>
<p>File &gt; Settings &gt; Appearance &amp; Behavior &gt; Appearance &gt; Theme&quot;，默认可以选择Light和Darcula，分别为白色和黑色主题，选择之后点击Apply应用。</p>
<figure data-type="image" tabindex="1"><img src="https://ouluqiang.github.io//post-images/1569570829889.png" alt=""></figure>
<h2 id="2修改字体大小和字体样式">2.修改字体大小和字体样式</h2>
<p>File &gt; Settings &gt; Editor &gt; Color Scheme &gt; Color Scheme Font，先选择一个Scheme主题，打勾设置size然后Apply就好了。在Font下可以选择各种字体。</p>
<figure data-type="image" tabindex="2"><img src="https://ouluqiang.github.io//post-images/1569570855113.png" alt=""></figure>
<h2 id="3设置文件注释模板">3.设置文件注释模板</h2>
<p>File &gt; Settings &gt; Editor &gt; File and Code Templates，切换到Includes下，在File Header里面设置注释模板。</p>
<figure data-type="image" tabindex="3"><img src="https://ouluqiang.github.io//post-images/1569570879010.png" alt=""></figure>
<h2 id="4默认文件编码">4.默认文件编码</h2>
<p>File &gt; Settings &gt; Editor &gt; File Encodings。建议将 IDE Encoding 、 Project Encoding 、 Properties Fiels 都设置成统一的UTB-8编码。</p>
<figure data-type="image" tabindex="4"><img src="https://ouluqiang.github.io//post-images/1569570937484.png" alt=""></figure>
<h2 id="5显示行号">5.显示行号</h2>
<p>File | Settings | Editor | General | Appearance，勾选show line numbers</p>
<figure data-type="image" tabindex="5"><img src="https://ouluqiang.github.io//post-images/1569570972769.png" alt=""></figure>
<h2 id="6自动导入">6.自动导入</h2>
<p>File &gt; Settings &gt; Editor &gt; General &gt; Auto Import,修改不区分大小写提示，勾选导包和删除无用包</p>
<figure data-type="image" tabindex="6"><img src="https://ouluqiang.github.io//post-images/1569570998987.png" alt=""></figure>
<h2 id="鼠标悬停显示方法说明">鼠标悬停显示方法说明</h2>
<p>File &gt; Settings &gt; Editor &gt; General<br>
可修改悬停多久，才显示方法说明(单位：毫秒)。</p>
<figure data-type="image" tabindex="7"><img src="https://ouluqiang.github.io//post-images/1569571044992.png" alt=""></figure>
<h2 id="删除的类的历史记录与未修改前的类对比">删除的类的历史记录，与未修改前的类对比</h2>
<figure data-type="image" tabindex="8"><img src="https://ouluqiang.github.io//post-images/1569572112977.png" alt=""></figure>
<h2 id="导出导入studio设置属性">导出，导入studio设置属性</h2>
<p>File &gt; Export Settings 导出设置</p>
<figure data-type="image" tabindex="9"><img src="https://ouluqiang.github.io//post-images/1569572137353.png" alt=""></figure>
<p>File &gt; Import Settings 导入设置</p>
<figure data-type="image" tabindex="10"><img src="https://ouluqiang.github.io//post-images/1569572165039.png" alt=""></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[jdk sdk环境配置 Android下载]]></title>
        <id>https://ouluqiang.github.io//post/jdk-sdk-huan-jing-pei-zhi-android-xia-zai</id>
        <link href="https://ouluqiang.github.io//post/jdk-sdk-huan-jing-pei-zhi-android-xia-zai">
        </link>
        <updated>2019-09-24T09:16:07.000Z</updated>
        <content type="html"><![CDATA[<h1 id="下载">下载</h1>
<p><a href="https://www.oracle.com/technetwork/java/javase/downloads/index.html">jdk下载地址</a></p>
<p>jdk下载</p>
<pre><code>链接：https://pan.baidu.com/s/1AVshFeP9ZkT05xk_FIINag 
提取码：t8ci 
</code></pre>
<p><a href="http://www.android-studio.org/index.php">Android studio sdk 下载地址</a></p>
<h2 id="jdk12">jdk12</h2>
<p>安装JDK11或以上版本，安装过程中没有提示安装JRE，进入JDK安装路径下 shift+右键 在此处打开命令窗口</p>
<p>输入</p>
<pre><code> bin\jlink.exe --module-path jmods --add-modules java.desktop --output jre   
</code></pre>
<p>执行完成就会生成JRE</p>
<figure data-type="image" tabindex="1"><img src="https://ouluqiang.github.io//post-images/1569573855494.png" alt=""></figure>
<h2 id="jdk8">jdk8</h2>
<p>正常安装</p>
<h2 id="环境变量配置">环境变量配置</h2>
<p>我的电脑右键，点击属性，点击高级系统设置，点击环境变量</p>
<figure data-type="image" tabindex="2"><img src="https://ouluqiang.github.io//post-images/1569573876482.png" alt=""></figure>
<p>新建系统变量，变量名写 JAVA_HOME 变量值 填写你JDK安装的路径</p>
<figure data-type="image" tabindex="3"><img src="https://ouluqiang.github.io//post-images/1569573893452.png" alt=""></figure>
<p>双击系统变量path编辑变量值 %JAVA_HOME%\bin;%JAVA_HOME%\jre\bin</p>
<figure data-type="image" tabindex="4"><img src="https://ouluqiang.github.io//post-images/1569573915023.png" alt=""></figure>
<p>在系统变量中新建 classpath 变量名，变量值为  %JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar</p>
<figure data-type="image" tabindex="5"><img src="https://ouluqiang.github.io//post-images/1569573938408.png" alt=""></figure>
<p>win+R运行输入cmd，输入java -version查看JDK版本和JVM信息</p>
<figure data-type="image" tabindex="6"><img src="https://ouluqiang.github.io//post-images/1569573946973.png" alt=""></figure>
<h1 id="sdk">sdk</h1>
<p>新建系统变量ANDROID_HOME，变量值D:\xx\sdk（以你安装目录为准,确认里面有tools和add-ons等多个文件夹）</p>
<figure data-type="image" tabindex="7"><img src="https://ouluqiang.github.io//post-images/1569573974734.png" alt=""></figure>
<p>在系统变量PATH后面加上变量值;%ANDROID_HOME%\platform-tools;</p>
<figure data-type="image" tabindex="8"><img src="https://ouluqiang.github.io//post-images/1569573987528.png" alt=""></figure>
<p>win+R运行输入cmd，输入adb 查看</p>
<figure data-type="image" tabindex="9"><img src="https://ouluqiang.github.io//post-images/1569574016688.png" alt=""></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[gson type封装泛型]]></title>
        <id>https://ouluqiang.github.io//post/gson-type-feng-zhuang-fan-xing</id>
        <link href="https://ouluqiang.github.io//post/gson-type-feng-zhuang-fan-xing">
        </link>
        <updated>2019-09-24T08:33:44.000Z</updated>
        <content type="html"><![CDATA[<h2 id="type封装获取泛型的实际类型">type封装获取泛型的实际类型</h2>
<blockquote>
<p>通过getGenericSuperclass方法可以获取当前对象的直接超类的 Type</p>
</blockquote>
<p>getClass().getGenericSuperclass()返回表示此 Class 所表示的实体（类、接口、基本类型或 void）的直接超类的 Type<br>
然后将其转换ParameterizedType。。<br>
getActualTypeArguments()返回表示此类型实际类型参数的 Type 对象的数组。<br>
[0]就是这个数组中第一个了。。简而言之就是获得超类的泛型参数的实际类型。。</p>
<pre><code>        Type genericSuperclass = getClass().getGenericSuperclass();
        if (genericSuperclass instanceof ParameterizedType) {
            this.type = ((ParameterizedType) genericSuperclass).getActualTypeArguments()[0];
        } else {
            this.type = Object.class; 
            // 基本不会走这个判断
        }
</code></pre>
<h2 id="解决-gson反序列化自动将int类型转化成double类型">解决 gson反序列化自动将int类型转化成double类型</h2>
<pre><code>    private static Gson gson=new GsonBuilder().
        registerTypeAdapter(Double.class, new JsonSerializer&lt;Double&gt;() {

            @Override
            public JsonElement serialize(Double src, Type typeOfSrc, JsonSerializationContext context) {
                if (src == src.longValue())
                    return new JsonPrimitive(src.longValue());
                return new JsonPrimitive(src);
            }
        }).create();
</code></pre>
]]></content>
    </entry>
</feed>