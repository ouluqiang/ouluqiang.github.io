<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://ouluqiang.github.io/</id>
    <title>小白记忆屋</title>
    <updated>2019-09-24T09:19:52.629Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://ouluqiang.github.io/"/>
    <link rel="self" href="https://ouluqiang.github.io//atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://ouluqiang.github.io//images/avatar.png</logo>
    <icon>https://ouluqiang.github.io//favicon.ico</icon>
    <rights>All rights reserved 2019, 小白记忆屋</rights>
    <entry>
        <title type="html"><![CDATA[Android studio常用设置]]></title>
        <id>https://ouluqiang.github.io//post/android-studio-chang-yong-she-zhi</id>
        <link href="https://ouluqiang.github.io//post/android-studio-chang-yong-she-zhi">
        </link>
        <updated>2019-09-24T09:19:41.000Z</updated>
        <content type="html"><![CDATA[<h2 id="1设置编辑界面和代码主题">1.设置编辑界面和代码主题</h2>
<p>File &gt; Settings &gt; Appearance &amp; Behavior &gt; Appearance &gt; Theme&quot;，默认可以选择Light和Darcula，分别为白色和黑色主题，选择之后点击Apply应用。</p>
<figure data-type="image" tabindex="1"><img src="https://upload-images.jianshu.io/upload_images/2025676-f4a1ef76abed3b51.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></figure>
<h2 id="2修改字体大小和字体样式">2.修改字体大小和字体样式</h2>
<p>File &gt; Settings &gt; Editor &gt; Color Scheme &gt; Color Scheme Font，先选择一个Scheme主题，打勾设置size然后Apply就好了。在Font下可以选择各种字体。</p>
<figure data-type="image" tabindex="2"><img src="https://upload-images.jianshu.io/upload_images/2025676-df82492419a296ce.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></figure>
<h2 id="3设置文件注释模板">3.设置文件注释模板</h2>
<p>File &gt; Settings &gt; Editor &gt; File and Code Templates，切换到Includes下，在File Header里面设置注释模板。</p>
<figure data-type="image" tabindex="3"><img src="https://upload-images.jianshu.io/upload_images/2025676-70921575f0087fb7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></figure>
<h2 id="4默认文件编码">4.默认文件编码</h2>
<p>File &gt; Settings &gt; Editor &gt; File Encodings。建议将 IDE Encoding 、 Project Encoding 、 Properties Fiels 都设置成统一的UTB-8编码。</p>
<figure data-type="image" tabindex="4"><img src="https://upload-images.jianshu.io/upload_images/2025676-b0640b99b22c7493.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></figure>
<h2 id="5显示行号">5.显示行号</h2>
<p>File | Settings | Editor | General | Appearance，勾选show line numbers</p>
<figure data-type="image" tabindex="5"><img src="https://upload-images.jianshu.io/upload_images/2025676-07d17066e3f7cd54.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></figure>
<h2 id="6自动导入">6.自动导入</h2>
<p>File &gt; Settings &gt; Editor &gt; General &gt; Auto Import,修改不区分大小写提示，勾选导包和删除无用包</p>
<figure data-type="image" tabindex="6"><img src="https://upload-images.jianshu.io/upload_images/2025676-0f0c585bbb85a72f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></figure>
<h2 id="鼠标悬停显示方法说明">鼠标悬停显示方法说明</h2>
<p>File &gt; Settings &gt; Editor &gt; General<br>
可修改悬停多久，才显示方法说明(单位：毫秒)。</p>
<figure data-type="image" tabindex="7"><img src="https://upload-images.jianshu.io/upload_images/2025676-6b377dbff2bad4c6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></figure>
<h2 id="删除的类的历史记录与未修改前的类对比">删除的类的历史记录，与未修改前的类对比</h2>
<figure data-type="image" tabindex="8"><img src="https://upload-images.jianshu.io/upload_images/2025676-1828151b723cc4fb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></figure>
<h2 id="导出导入studio设置属性">导出，导入studio设置属性</h2>
<p>File &gt; Export Settings 导出设置<br>
<img src="https://upload-images.jianshu.io/upload_images/2025676-326cd4eec04166c8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<p>File &gt; Import Settings 导入设置<br>
<img src="https://upload-images.jianshu.io/upload_images/2025676-6b25d777f1bed0e0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[jdk sdk环境配置 Android下载]]></title>
        <id>https://ouluqiang.github.io//post/jdk-sdk-huan-jing-pei-zhi-android-xia-zai</id>
        <link href="https://ouluqiang.github.io//post/jdk-sdk-huan-jing-pei-zhi-android-xia-zai">
        </link>
        <updated>2019-09-24T09:16:07.000Z</updated>
        <content type="html"><![CDATA[<h1 id="下载">下载</h1>
<p><a href="https://www.oracle.com/technetwork/java/javase/downloads/index.html">jdk下载地址</a></p>
<p>jdk下载<br>
链接：https://pan.baidu.com/s/1AVshFeP9ZkT05xk_FIINag<br>
提取码：t8ci</p>
<p><a href="http://www.android-studio.org/index.php">Android studio sdk 下载地址</a></p>
<h2 id="jdk12">jdk12</h2>
<p>安装JDK11或以上版本，安装过程中没有提示安装JRE，进入JDK安装路径下 shift+右键 在此处打开命令窗口</p>
<p>输入</p>
<pre><code> bin\jlink.exe --module-path jmods --add-modules java.desktop --output jre   
</code></pre>
<p>执行完成就会生成JRE</p>
<figure data-type="image" tabindex="1"><img src="https://upload-images.jianshu.io/upload_images/2025676-092ee2d81fb4e15d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></figure>
<h2 id="jdk8">jdk8</h2>
<p>正常安装</p>
<h2 id="环境变量配置">环境变量配置</h2>
<p>我的电脑右键，点击属性，点击高级系统设置，点击环境变量</p>
<figure data-type="image" tabindex="2"><img src="https://upload-images.jianshu.io/upload_images/2025676-80d9883df2172e7d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></figure>
<p>新建系统变量，变量名写 JAVA_HOME 变量值 填写你JDK安装的路径</p>
<figure data-type="image" tabindex="3"><img src="https://upload-images.jianshu.io/upload_images/2025676-14e4cad6e48b11de.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></figure>
<p>双击系统变量path编辑变量值 %JAVA_HOME%\bin;%JAVA_HOME%\jre\bin</p>
<figure data-type="image" tabindex="4"><img src="https://upload-images.jianshu.io/upload_images/2025676-b05e6e5352c1876b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></figure>
<p>在系统变量中新建 classpath 变量名，变量值为  %JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar</p>
<figure data-type="image" tabindex="5"><img src="https://upload-images.jianshu.io/upload_images/2025676-84140d49e227ae06.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></figure>
<p>win+R运行输入cmd，输入java -version查看JDK版本和JVM信息</p>
<figure data-type="image" tabindex="6"><img src="https://upload-images.jianshu.io/upload_images/2025676-b5bff947bcc4d526.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></figure>
<h1 id="sdk">sdk</h1>
<p>新建系统变量ANDROID_HOME，变量值D:\xx\sdk（以你安装目录为准,确认里面有tools和add-ons等多个文件夹）</p>
<figure data-type="image" tabindex="7"><img src="https://upload-images.jianshu.io/upload_images/2025676-7c4474ac5ea494cc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></figure>
<p>在系统变量PATH后面加上变量值;%ANDROID_HOME%\platform-tools;</p>
<figure data-type="image" tabindex="8"><img src="https://upload-images.jianshu.io/upload_images/2025676-95aa820c636c3cd8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></figure>
<p>win+R运行输入cmd，输入adb 查看</p>
<figure data-type="image" tabindex="9"><img src="https://upload-images.jianshu.io/upload_images/2025676-a43222dcc6f1aa70.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[gson type封装泛型]]></title>
        <id>https://ouluqiang.github.io//post/gson-type-feng-zhuang-fan-xing</id>
        <link href="https://ouluqiang.github.io//post/gson-type-feng-zhuang-fan-xing">
        </link>
        <updated>2019-09-24T08:33:44.000Z</updated>
        <content type="html"><![CDATA[<h2 id="type封装获取泛型的实际类型">type封装获取泛型的实际类型</h2>
<blockquote>
<p>通过getGenericSuperclass方法可以获取当前对象的直接超类的 Type</p>
</blockquote>
<p>getClass().getGenericSuperclass()返回表示此 Class 所表示的实体（类、接口、基本类型或 void）的直接超类的 Type<br>
然后将其转换ParameterizedType。。<br>
getActualTypeArguments()返回表示此类型实际类型参数的 Type 对象的数组。<br>
[0]就是这个数组中第一个了。。简而言之就是获得超类的泛型参数的实际类型。。</p>
<pre><code>        Type genericSuperclass = getClass().getGenericSuperclass();
        if (genericSuperclass instanceof ParameterizedType) {
            this.type = ((ParameterizedType) genericSuperclass).getActualTypeArguments()[0];
        } else {
            this.type = Object.class; 
            // 基本不会走这个判断
        }
</code></pre>
<h2 id="解决-gson反序列化自动将int类型转化成double类型">解决 gson反序列化自动将int类型转化成double类型</h2>
<pre><code>    private static Gson gson=new GsonBuilder().
        registerTypeAdapter(Double.class, new JsonSerializer&lt;Double&gt;() {

            @Override
            public JsonElement serialize(Double src, Type typeOfSrc, JsonSerializationContext context) {
                if (src == src.longValue())
                    return new JsonPrimitive(src.longValue());
                return new JsonPrimitive(src);
            }
        }).create();
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Gridea保存源文件]]></title>
        <id>https://ouluqiang.github.io//post/gridea-bao-cun-yuan-wen-jian</id>
        <link href="https://ouluqiang.github.io//post/gridea-bao-cun-yuan-wen-jian">
        </link>
        <updated>2019-09-24T07:55:55.000Z</updated>
        <content type="html"><![CDATA[<h2 id="创建分支">创建分支</h2>
<p>在GitHub的博客项目中新建一个分支</p>
<figure data-type="image" tabindex="1"><img src="https://ouluqiang.github.io//post-images/1569311927040.jpg" alt=""></figure>
<p>克隆项目到本地</p>
<pre><code>git clone https://github.com/xxx/xxx.github.io.git
</code></pre>
<h2 id="切换分支">切换分支</h2>
<p>到本地项目中打开Git Bash, 切换到项目分支，查看分支，用 git checkout XXX 切换分支</p>
<pre><code># 列出所有本地分支
$ git branch

# 列出所有远程分支
$ git branch -r

# 列出所有本地分支和远程分支
$ git branch -a

# 切换到指定分支，并更新工作区
$ git checkout [branch-name]
</code></pre>
<figure data-type="image" tabindex="2"><img src="https://ouluqiang.github.io//post-images/1569311864422.jpg" alt=""></figure>
<h2 id="生成ssh-key的私钥和公钥">生成ssh-key的私钥和公钥</h2>
<p>生成key,看C盘用户目录SSH</p>
<pre><code>ssh-keygen -t rsa      //一路回车下来
</code></pre>
<figure data-type="image" tabindex="3"><img src="https://ouluqiang.github.io//post-images/1569314857492.jpg" alt=""></figure>
<p>测试是否能连接上GitHub服务器</p>
<pre><code>ssh -T git@github.com
</code></pre>
<p>输出是.........<br>
Permission denied (publickey).<br>
需要将上面生成的public key(id_rsa.pub文件内容)拷贝到github服务器的SSH Keys中，<br>
再.ssh目录下打开终端输入下面代码查看内容，或者直接记事本打开查看</p>
<pre><code>cat id_rsa.pub
</code></pre>
<figure data-type="image" tabindex="4"><img src="https://ouluqiang.github.io//post-images/1569315446419.jpg" alt=""></figure>
<p>头像 &gt; settings &gt; ssh<br>
<img src="https://ouluqiang.github.io//post-images/1569315521381.jpg" alt=""></p>
<p>再测试下是否连接GitHub服务器 ssh -T git@github.com 能显示GitHub用户名就表示连接成功<br>
<img src="https://ouluqiang.github.io//post-images/1569315793106.jpg" alt=""></p>
<p>把源文件复制到分支项目,再打开Git Bash 提交代码<br>
<img src="https://ouluqiang.github.io//post-images/1569311872576.jpg" alt=""></p>
<pre><code># 添加当前目录的所有文件到暂存区
$ git add .

# 提交暂存区到仓库区
$ git commit -m ‘修改说明，随便写’

# 提交到远程仓库
git push
</code></pre>
<p>提交成功<br>
<img src="https://ouluqiang.github.io//post-images/1569311915447.jpg" alt=""></p>
<p>有一个问题就是提交完会导致token失效</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[常用开发工具]]></title>
        <id>https://ouluqiang.github.io//post/chang-yong-kai-fa-gong-ju</id>
        <link href="https://ouluqiang.github.io//post/chang-yong-kai-fa-gong-ju">
        </link>
        <updated>2019-09-24T05:22:26.000Z</updated>
        <summary type="html"><![CDATA[<p>Android常用的开发工具</p>
]]></summary>
        <content type="html"><![CDATA[<p>Android常用的开发工具</p>
<!-- more -->
<h2 id="android-stidosdkjdk">Android stido，sdk，jdk</h2>
<p><a href="https://www.oracle.com/technetwork/java/javase/downloads/index.html">jdk下载地址</a></p>
<p>jdk下载</p>
<pre><code>链接：https://pan.baidu.com/s/1AVshFeP9ZkT05xk_FIINag 
提取码：t8ci 
</code></pre>
<p><a href="http://www.android-studio.org/index.php">Android studio sdk 下载地址</a></p>
<h2 id="svngit下载地址">svn,git下载地址</h2>
<p><a href="https://git-scm.com/downloads">git下载</a></p>
<pre><code>链接：https://pan.baidu.com/s/1C6hn1S-hBzdduEoIm7-4XA 
提取码：xktl 
</code></pre>
<h2 id="抓包工具charles学习版">抓包工具charles学习版</h2>
<pre><code>链接：https://pan.baidu.com/s/1aDRIDVu9y66niOZOnPcMDQ 
提取码：sj13 
</code></pre>
<h2 id="sqlite数据库工具">sqlite数据库工具</h2>
<pre><code>链接：https://pan.baidu.com/s/1I_w-rARDcKocKBXGOMbJdg 
提取码：trl1
</code></pre>
<h2 id="颜色获取">颜色获取</h2>
<pre><code>链接：https://pan.baidu.com/s/1-sLi9-PVYksCiE-RHSXquw 
提取码：tyrw 
</code></pre>
<h2 id="获取sha1值">获取SHA1值</h2>
<pre><code>链接：https://pan.baidu.com/s/15AvGDv-WjzU7jvLhJeLvhg 
提取码：081p 
</code></pre>
<h1 id="idea-学习版">idea 学习版</h1>
<p>http://idea.toocruel.net</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[charles使用]]></title>
        <id>https://ouluqiang.github.io//post/charles-shi-yong</id>
        <link href="https://ouluqiang.github.io//post/charles-shi-yong">
        </link>
        <updated>2019-09-23T10:38:43.000Z</updated>
        <summary type="html"><![CDATA[<p>charles基本设置使用</p>
]]></summary>
        <content type="html"><![CDATA[<p>charles基本设置使用</p>
<!-- more -->
<h2 id="抓包工具charles学习版">抓包工具charles学习版</h2>
<pre><code>链接：https://pan.baidu.com/s/1aDRIDVu9y66niOZOnPcMDQ 
提取码：sj13 
</code></pre>
<h2 id="http抓包">http抓包</h2>
<p>代理 &gt; 代理设置中设置端口号 8888 ,勾选启用HTTP代理<br>
<img src="https://ouluqiang.github.io//post-images/1569304039210.jpg" alt="代理设置"></p>
<figure data-type="image" tabindex="1"><img src="https://ouluqiang.github.io//post-images/1569303949066.jpg" alt="端口"></figure>
<p>帮助 &gt; 本地ip 查看电脑ip<br>
<img src="https://ouluqiang.github.io//post-images/1569304145156.jpg" alt="帮助"></p>
<figure data-type="image" tabindex="2"><img src="https://ouluqiang.github.io//post-images/1569304186481.jpg" alt="ip"></figure>
<p>手机和电脑在一个网段(连接同一个路由器)，在手机网络设置里面填写代理服务地址信息<br>
电脑ip ,  端口号</p>
<figure data-type="image" tabindex="3"><img src="https://ouluqiang.github.io//post-images/1569304740083.jpg" alt="代理"></figure>
<p>在使用手机进行网络请求时，charles会有一个提示，允许即可</p>
<h2 id="https抓包">https抓包</h2>
<p>https需要安装证书，注意电脑安装证书需要安装到受信任的颁发机构</p>
<figure data-type="image" tabindex="4"><img src="https://ouluqiang.github.io//post-images/1569305139356.jpg" alt="证书"></figure>
<figure data-type="image" tabindex="5"><img src="https://ouluqiang.github.io//post-images/1569305350226.jpg" alt="安装证书"></figure>
<p>手机也需要安装证书，在浏览器下载证书,如果不识别，不能安装，建议用谷歌浏览器app下载安装</p>
<pre><code>chls.pro/ssl
</code></pre>
<figure data-type="image" tabindex="6"><img src="https://ouluqiang.github.io//post-images/1569305456616.jpg" alt="手机证书"></figure>
<p>勾选Windows代理，打开ssl代理设置<br>
<img src="https://ouluqiang.github.io//post-images/1569305597175.jpg" alt="ssl设置"></p>
<p>添加主机和端口号， 主机用*，端口号443抓取https，也可以用*<br>
<img src="https://ouluqiang.github.io//post-images/1569305786428.jpg" alt=""></p>
<h2 id="android-70抓https失败的解决方案">Android 7.0抓https失败的解决方案</h2>
<p>新建network_security_config.xml文件<br>
<img src="https://ouluqiang.github.io//post-images/1569302838764.png" alt="network_security_config"></p>
<p>在network_security_config.xml文件写入以下代码</p>
<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;network-security-config&gt;
    &lt;base-config cleartextTrafficPermitted=&quot;true&quot;&gt;
        &lt;trust-anchors&gt;
            &lt;certificates src=&quot;system&quot; overridePins=&quot;true&quot; /&gt;
            &lt;certificates src=&quot;user&quot; overridePins=&quot;true&quot; /&gt;
        &lt;/trust-anchors&gt;
    &lt;/base-config&gt;
&lt;/network-security-config&gt;
</code></pre>
<p>在AndroidManifest.xml添加配置</p>
<figure data-type="image" tabindex="7"><img src="https://ouluqiang.github.io//post-images/1569302899586.png" alt="networkSecurityConfig"></figure>
<pre><code>android:networkSecurityConfig=&quot;@xml/network_security_config&quot;
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[正则表达式]]></title>
        <id>https://ouluqiang.github.io//post/zheng-ze-biao-da-shi</id>
        <link href="https://ouluqiang.github.io//post/zheng-ze-biao-da-shi">
        </link>
        <updated>2019-09-23T10:29:08.000Z</updated>
        <summary type="html"><![CDATA[<p>一些常用正则表达式</p>
]]></summary>
        <content type="html"><![CDATA[<p>一些常用正则表达式</p>
<!-- more -->
<h2 id="搜索中文">搜索中文</h2>
<pre><code>^((?!(\*|//)).)+[\u4e00-\u9fa5]
</code></pre>
<h2 id="验证密码首位为字母或数字">验证密码首位为字母或数字</h2>
<pre><code>[0-9 a-z A-Z]\w*
</code></pre>
<h2 id="验证email">验证Email</h2>
<pre><code>\w+@\w+\.[a-z]+(\.[a-z]+)?
</code></pre>
<h2 id="验证身份证号码">验证身份证号码</h2>
<pre><code>(^\d{15}$)|(^\d{18}$)|(^\d{17}(\d|X|x)$)
</code></pre>
<h2 id="验证手机号码">验证手机号码</h2>
<pre><code>(\+\d+)?1[3456789]\d{9}$
</code></pre>
<h2 id="验证固定电话号码">验证固定电话号码</h2>
<pre><code>(\+\d+)?(\d{3,4}\-?)?\d{7,8}$
</code></pre>
<h2 id="验证整数正整数和负整数">验证整数（正整数和负整数）</h2>
<pre><code>\-?[1-9]\d+
</code></pre>
<h2 id="验证整数和浮点数正负整数和正负浮点数">验证整数和浮点数（正负整数和正负浮点数）</h2>
<pre><code>\-?[1-9]\d+(\.\d+)?
</code></pre>
<h2 id="验证空白字符">验证空白字符</h2>
<pre><code>\\s+
</code></pre>
<h2 id="验证中文">验证中文</h2>
<pre><code>^[\u4E00-\u9FA5]+$
</code></pre>
<h2 id="验证日期年月日">验证日期（年月日）</h2>
<pre><code>[1-9]{4}([-./])\d{1,2}\1\d{1,2}
</code></pre>
<h2 id="验证url地址">验证URL地址</h2>
<pre><code>(https?://(w{3}\.)?)?\w+\.\w+(\.[a-zA-Z]+)*(:\d{1,5})?(/\w*)*(\??(.+=.*)?(&amp;.+=.*)?)?
</code></pre>
<h2 id="获取网址-url-的一级域名">获取网址 URL 的一级域名</h2>
<pre><code>(?&lt;=http://|\.)[^.]*?\.(com|cn|net|org|biz|info|cc|tv)
</code></pre>
<h2 id="匹配中国邮政编码">匹配中国邮政编码</h2>
<pre><code>[1-9]\d{5}
</code></pre>
<h2 id="匹配ip地址简单匹配格式如19216811127001没有匹配ip段的大小">匹配IP地址(简单匹配，格式，如：192.168.1.1，127.0.0.1，没有匹配IP段的大小)</h2>
<pre><code>[1-9](\d{1,2})?\.(0|([1-9](\d{1,2})?))\.(0|([1-9](\d{1,2})?))\.(0|([1-9](\d{1,2})?))
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Gridea，GitHub配置使用]]></title>
        <id>https://ouluqiang.github.io//post/grideagithub-pei-zhi-shi-yong</id>
        <link href="https://ouluqiang.github.io//post/grideagithub-pei-zhi-shi-yong">
        </link>
        <updated>2019-09-18T10:17:55.000Z</updated>
        <summary type="html"><![CDATA[<p>写博客的工具与GitHub的基本配置</p>
]]></summary>
        <content type="html"><![CDATA[<p>写博客的工具与GitHub的基本配置</p>
<!-- more -->
<h2 id="创建github-博客项目">创建github 博客项目</h2>
<p>创建一个repo，名称为 yourname.github.io, 其中yourname是你的github名称，按照这个规则创建才有用哦，如下：</p>
<figure data-type="image" tabindex="1"><img src="https://ouluqiang.github.io//post-images/1569307197693.jpg" alt="创建项目"></figure>
<p>xxx.github.io  xxx必须是你的用户名，创建项目，我的已经存在了</p>
<figure data-type="image" tabindex="2"><img src="https://ouluqiang.github.io//post-images/1569307241793.jpg" alt=""></figure>
<h2 id="创建一个-token"><a href="https://github.com/settings/tokens/new">创建一个 Token</a></h2>
<p>只勾选repo即可，防止token泄漏</p>
<figure data-type="image" tabindex="3"><img src="https://ouluqiang.github.io//post-images/1569307352985.png" alt=""></figure>
<p>拿到token填写到gridea的基础配置token里</p>
<figure data-type="image" tabindex="4"><img src="https://ouluqiang.github.io//post-images/1569307358531.png" alt=""></figure>
<figure data-type="image" tabindex="5"><img src="https://ouluqiang.github.io//post-images/1569307416363.png" alt=""></figure>
<p>检测远程连接成功就可以了，如果确定都填对了，就关闭gridea软件再打开软件检测远程连接</p>
<h2 id="创建一个-oauth"><a href="https://github.com/settings/applications/new">创建一个 OAuth</a></h2>
<figure data-type="image" tabindex="6"><img src="https://ouluqiang.github.io//post-images/1569307480431.png" alt=""></figure>
<p>填写到Gridea的配置评论栏中</p>
<figure data-type="image" tabindex="7"><img src="https://ouluqiang.github.io//post-images/1569307505346.png" alt=""></figure>
<figure data-type="image" tabindex="8"><img src="https://ouluqiang.github.io//post-images/1569307563455.png" alt=""></figure>
<p>再博客中测试评论，成功即可</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[adb wifi 调试]]></title>
        <id>https://ouluqiang.github.io//post/adb-wifi-diao-shi</id>
        <link href="https://ouluqiang.github.io//post/adb-wifi-diao-shi">
        </link>
        <updated>2019-09-18T08:48:35.000Z</updated>
        <content type="html"><![CDATA[<h2 id="连接手机和电脑">连接手机和电脑</h2>
<p>命令行 adb devices 查看连接</p>
<figure data-type="image" tabindex="1"><img src="https://ouluqiang.github.io//post-images/1568884026016.png" alt="连接"></figure>
<h2 id="设置5555端口">设置5555端口</h2>
<p>设置wifi调试端口 5555</p>
<pre><code>    adb tcpip 5555
</code></pre>
<figure data-type="image" tabindex="2"><img src="https://ouluqiang.github.io//post-images/1568886196625.png" alt="端口"></figure>
<h2 id="查看手机ip">查看手机ip</h2>
<pre><code>    adb shell  ifconfig wlan0
</code></pre>
<figure data-type="image" tabindex="3"><img src="https://ouluqiang.github.io//post-images/1568886240609.png" alt="ip"></figure>
<p>手机操作，打开 设置-WLAN-配置 页面，可看到当前 IP</p>
<figure data-type="image" tabindex="4"><img src="https://ouluqiang.github.io//post-images/1568886275147.png" alt="ip"></figure>
<h2 id="连接手机">连接手机</h2>
<pre><code>    adb connect &lt;手机ip地址&gt;
</code></pre>
<figure data-type="image" tabindex="5"><img src="https://ouluqiang.github.io//post-images/1568886318164.png" alt="连接"></figure>
<h2 id="成功">成功</h2>
<p>连接成功显示</p>
<figure data-type="image" tabindex="6"><img src="https://ouluqiang.github.io//post-images/1568886341285.png" alt="成功"></figure>
<p>锤子手机测试失败</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[git命令]]></title>
        <id>https://ouluqiang.github.io//post/git-ming-ling</id>
        <link href="https://ouluqiang.github.io//post/git-ming-ling">
        </link>
        <updated>2019-09-18T08:28:33.000Z</updated>
        <content type="html"><![CDATA[<h2 id="新建代码库">新建代码库</h2>
<pre><code># 在当前目录新建一个Git代码库
$ git init

# 新建一个目录，将其初始化为Git代码库
$ git init [project-name]

# 下载一个项目和它的整个代码历史
$ git clone [url]
</code></pre>
<h2 id="配置">配置</h2>
<pre><code># 显示当前的Git配置
$ git config --list

# 编辑Git配置文件
$ git config -e [--global]

# 设置提交代码时的用户信息
$ git config [--global] user.name &quot;[name]&quot;
$ git config [--global] user.email &quot;[email address]&quot;
</code></pre>
<h2 id="增加删除文件">增加/删除文件</h2>
<pre><code># 添加指定文件到暂存区
$ git add [file1] [file2] ...

# 添加指定目录到暂存区，包括子目录
$ git add [dir]

# 添加当前目录的所有文件到暂存区
$ git add .

# 添加每个变化前，都会要求确认
# 对于同一个文件的多处变化，可以实现分次提交
$ git add -p

# 删除工作区文件，并且将这次删除放入暂存区
$ git rm [file1] [file2] ...

# 停止追踪指定文件，但该文件会保留在工作区
$ git rm --cached [file]

# 改名文件，并且将这个改名放入暂存区
$ git mv [file-original] [file-renamed]
</code></pre>
<h2 id="代码提交">代码提交</h2>
<pre><code># 提交暂存区到仓库区
$ git commit -m [message]

# 提交暂存区的指定文件到仓库区
$ git commit [file1] [file2] ... -m [message]

# 提交工作区自上次commit之后的变化，直接到仓库区
$ git commit -a

# 提交时显示所有diff信息
$ git commit -v

# 使用一次新的commit，替代上一次提交
# 如果代码没有任何新变化，则用来改写上一次commit的提交信息
$ git commit --amend -m [message]

# 重做上一次commit，并包括指定文件的新变化
$ git commit --amend [file1] [file2] ...
</code></pre>
<h2 id="分支">分支</h2>
<pre><code># 列出所有本地分支
$ git branch

# 列出所有远程分支
$ git branch -r

# 列出所有本地分支和远程分支
$ git branch -a

# 新建一个分支，但依然停留在当前分支
$ git branch [branch-name]

# 新建一个分支，并切换到该分支
$ git checkout -b [branch]

# 新建一个分支，指向指定commit
$ git branch [branch] [commit]

# 新建一个分支，与指定的远程分支建立追踪关系
$ git branch --track [branch] [remote-branch]

# 切换到指定分支，并更新工作区
$ git checkout [branch-name]

# 切换到上一个分支
$ git checkout -

# 建立追踪关系，在现有分支与指定的远程分支之间
$ git branch --set-upstream [branch] [remote-branch]

# 合并指定分支到当前分支
$ git merge [branch]

# 选择一个commit，合并进当前分支
$ git cherry-pick [commit]

# 删除分支
$ git branch -d [branch-name]

# 删除远程分支
$ git push origin --delete [branch-name]
$ git branch -dr [remote/branch]
</code></pre>
<h2 id="标签">标签</h2>
<pre><code># 列出所有tag
$ git tag

# 新建一个tag在当前commit
$ git tag [tag]

# 新建一个tag在指定commit
$ git tag [tag] [commit]

# 删除本地tag
$ git tag -d [tag]

# 删除远程tag
$ git push origin :refs/tags/[tagName]

# 查看tag信息
$ git show [tag]

# 提交指定tag
$ git push [remote] [tag]

# 提交所有tag
$ git push [remote] --tags

# 新建一个分支，指向某个tag
$ git checkout -b [branch] [tag]
</code></pre>
<h2 id="查看信息">查看信息</h2>
<pre><code># 显示有变更的文件
$ git status

# 显示当前分支的版本历史
$ git log

# 显示commit历史，以及每次commit发生变更的文件
$ git log --stat

# 搜索提交历史，根据关键词
$ git log -S [keyword]

# 显示某个commit之后的所有变动，每个commit占据一行
$ git log [tag] HEAD --pretty=format:%s

# 显示某个commit之后的所有变动，其&quot;提交说明&quot;必须符合搜索条件
$ git log [tag] HEAD --grep feature

# 显示某个文件的版本历史，包括文件改名
$ git log --follow [file]
$ git whatchanged [file]

# 显示指定文件相关的每一次diff
$ git log -p [file]

# 显示过去5次提交
$ git log -5 --pretty --oneline

# 显示所有提交过的用户，按提交次数排序
$ git shortlog -sn

# 显示指定文件是什么人在什么时间修改过
$ git blame [file]

# 显示暂存区和工作区的代码差异
$ git diff

# 显示暂存区和上一个commit的差异
$ git diff --cached [file]

# 显示工作区与当前分支最新commit之间的差异
$ git diff HEAD

# 显示两次提交之间的差异
$ git diff [first-branch]...[second-branch]

# 显示今天你写了多少行代码
$ git diff --shortstat &quot;@{0 day ago}&quot;

# 显示某次提交的元数据和内容变化
$ git show [commit]

# 显示某次提交发生变化的文件
$ git show --name-only [commit]

# 显示某次提交时，某个文件的内容
$ git show [commit]:[filename]

# 显示当前分支的最近几次提交
$ git reflog

# 从本地master拉取代码更新当前分支：branch 一般为master
$ git rebase [branch]
</code></pre>
<h2 id="远程同步">远程同步</h2>
<pre><code># 下载远程仓库的所有变动
$ git fetch [remote]

# 显示所有远程仓库
$ git remote -v

# 显示某个远程仓库的信息
$ git remote show [remote]

# 增加一个新的远程仓库，并命名
$ git remote add [shortname] [url]

# 取回远程仓库的变化，并与本地分支合并
$ git pull [remote] [branch]

# 上传本地指定分支到远程仓库
$ git push [remote] [branch]

# 强行推送当前分支到远程仓库，即使有冲突
$ git push [remote] --force

# 推送所有分支到远程仓库
$ git push [remote] --all
</code></pre>
<h2 id="撤销">撤销</h2>
<pre><code># 恢复暂存区的指定文件到工作区
$ git checkout [file]

# 恢复某个commit的指定文件到暂存区和工作区
$ git checkout [commit] [file]

# 恢复暂存区的所有文件到工作区
$ git checkout .

# 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变
$ git reset [file]

# 重置暂存区与工作区，与上一次commit保持一致
$ git reset --hard

# 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变
$ git reset [commit]

# 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致
$ git reset --hard [commit]

# 重置当前HEAD为指定commit，但保持暂存区和工作区不变
$ git reset --keep [commit]

# 新建一个commit，用来撤销指定commit
# 后者的所有变化都将被前者抵消，并且应用到当前分支
$ git revert [commit]

# 暂时将未提交的变化移除，稍后再移入
$ git stash
$ git stash pop
</code></pre>
<h2 id="其他">其他</h2>
<pre><code># 生成一个可供发布的压缩包
$ git archive
</code></pre>
]]></content>
    </entry>
</feed>