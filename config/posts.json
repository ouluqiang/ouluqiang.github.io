{
  "posts": [
    {
      "content": "# 下载\r\n\r\n[jdk下载地址](https://www.oracle.com/technetwork/java/javase/downloads/index.html)\r\n\r\njdk下载  \r\n链接：https://pan.baidu.com/s/1AVshFeP9ZkT05xk_FIINag \r\n提取码：t8ci \r\n\r\n\r\n\r\n[Android studio sdk 下载地址](http://www.android-studio.org/index.php)\r\n\r\n## jdk12\r\n\r\n安装JDK11或以上版本，安装过程中没有提示安装JRE，进入JDK安装路径下 shift+右键 在此处打开命令窗口\r\n\r\n  输入  \r\n  ```\r\n   bin\\jlink.exe --module-path jmods --add-modules java.desktop --output jre   \r\n  ```\r\n  执行完成就会生成JRE\r\n  \r\n![image.png](https://upload-images.jianshu.io/upload_images/2025676-092ee2d81fb4e15d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\r\n\r\n## jdk8\r\n正常安装\r\n\r\n## 环境变量配置\r\n\r\n我的电脑右键，点击属性，点击高级系统设置，点击环境变量\r\n\r\n![image.png](https://upload-images.jianshu.io/upload_images/2025676-80d9883df2172e7d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\r\n\r\n新建系统变量，变量名写 JAVA_HOME 变量值 填写你JDK安装的路径\r\n\r\n![image.png](https://upload-images.jianshu.io/upload_images/2025676-14e4cad6e48b11de.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\r\n\r\n双击系统变量path编辑变量值 %JAVA_HOME%\\bin;%JAVA_HOME%\\jre\\bin\r\n\r\n![image.png](https://upload-images.jianshu.io/upload_images/2025676-b05e6e5352c1876b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\r\n\r\n在系统变量中新建 classpath 变量名，变量值为  %JAVA_HOME%\\lib\\dt.jar;%JAVA_HOME%\\lib\\tools.jar\r\n\r\n![image.png](https://upload-images.jianshu.io/upload_images/2025676-84140d49e227ae06.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\r\n\r\nwin+R运行输入cmd，输入java -version查看JDK版本和JVM信息\r\n\r\n![image.png](https://upload-images.jianshu.io/upload_images/2025676-b5bff947bcc4d526.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\r\n\r\n\r\n# sdk\r\n\r\n新建系统变量ANDROID_HOME，变量值D:\\xx\\sdk（以你安装目录为准,确认里面有tools和add-ons等多个文件夹）\r\n\r\n![image.png](https://upload-images.jianshu.io/upload_images/2025676-7c4474ac5ea494cc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\r\n\r\n在系统变量PATH后面加上变量值;%ANDROID_HOME%\\platform-tools;\r\n\r\n![image.png](https://upload-images.jianshu.io/upload_images/2025676-95aa820c636c3cd8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\r\n\r\nwin+R运行输入cmd，输入adb 查看\r\n\r\n![image.png](https://upload-images.jianshu.io/upload_images/2025676-a43222dcc6f1aa70.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)",
      "data": {
        "title": "jdk sdk环境配置 Android下载",
        "date": "2019-09-24 17:16:07",
        "tags": [],
        "published": true,
        "hideInList": false,
        "feature": null
      },
      "isEmpty": false,
      "excerpt": "",
      "abstract": "",
      "fileName": "jdk-sdk-huan-jing-pei-zhi-android-xia-zai"
    },
    {
      "content": "## type封装获取泛型的实际类型\r\n    \r\n> 通过getGenericSuperclass方法可以获取当前对象的直接超类的 Type\r\n    \r\ngetClass().getGenericSuperclass()返回表示此 Class 所表示的实体（类、接口、基本类型或 void）的直接超类的 Type  \r\n然后将其转换ParameterizedType。。  \r\ngetActualTypeArguments()返回表示此类型实际类型参数的 Type 对象的数组。  \r\n[0]就是这个数组中第一个了。。简而言之就是获得超类的泛型参数的实际类型。。\r\n```\r\n        Type genericSuperclass = getClass().getGenericSuperclass();\r\n        if (genericSuperclass instanceof ParameterizedType) {\r\n            this.type = ((ParameterizedType) genericSuperclass).getActualTypeArguments()[0];\r\n        } else {\r\n            this.type = Object.class; \r\n            // 基本不会走这个判断\r\n        }\r\n```     \r\n        \r\n        \r\n## 解决 gson反序列化自动将int类型转化成double类型\r\n```\r\n    private static Gson gson=new GsonBuilder().\r\n        registerTypeAdapter(Double.class, new JsonSerializer<Double>() {\r\n\r\n            @Override\r\n            public JsonElement serialize(Double src, Type typeOfSrc, JsonSerializationContext context) {\r\n                if (src == src.longValue())\r\n                    return new JsonPrimitive(src.longValue());\r\n                return new JsonPrimitive(src);\r\n            }\r\n        }).create();\r\n```",
      "data": {
        "title": "gson type封装泛型",
        "date": "2019-09-24 16:33:44",
        "tags": [
          "Android",
          "gson"
        ],
        "published": true,
        "hideInList": false,
        "feature": null
      },
      "isEmpty": false,
      "excerpt": "",
      "abstract": "",
      "fileName": "gson-type-feng-zhuang-fan-xing"
    },
    {
      "content": "## 创建分支\r\n在GitHub的博客项目中新建一个分支\r\n\r\n![](https://ouluqiang.github.io//post-images/1569311927040.jpg)\r\n\r\n克隆项目到本地  \r\n```\r\ngit clone https://github.com/xxx/xxx.github.io.git\r\n```\r\n\r\n## 切换分支\r\n\r\n到本地项目中打开Git Bash, 切换到项目分支，查看分支，用 git checkout XXX 切换分支\r\n```\r\n# 列出所有本地分支\r\n$ git branch\r\n\r\n# 列出所有远程分支\r\n$ git branch -r\r\n\r\n# 列出所有本地分支和远程分支\r\n$ git branch -a\r\n\r\n# 切换到指定分支，并更新工作区\r\n$ git checkout [branch-name]\r\n```\r\n![](https://ouluqiang.github.io//post-images/1569311864422.jpg)\r\n\r\n## 生成ssh-key的私钥和公钥\r\n生成key,看C盘用户目录SSH\r\n\r\n```\r\nssh-keygen -t rsa      //一路回车下来\r\n```\r\n![](https://ouluqiang.github.io//post-images/1569314857492.jpg)\r\n\r\n测试是否能连接上GitHub服务器\r\n```\r\nssh -T git@github.com\r\n```\r\n输出是.........\r\nPermission denied (publickey).\r\n需要将上面生成的public key(id_rsa.pub文件内容)拷贝到github服务器的SSH Keys中，\r\n再.ssh目录下打开终端输入下面代码查看内容，或者直接记事本打开查看\r\n\r\n```\r\ncat id_rsa.pub\r\n```\r\n\r\n![](https://ouluqiang.github.io//post-images/1569315446419.jpg)\r\n\r\n头像 > settings > ssh\r\n![](https://ouluqiang.github.io//post-images/1569315521381.jpg)\r\n\r\n再测试下是否连接GitHub服务器 ssh -T git@github.com 能显示GitHub用户名就表示连接成功\r\n![](https://ouluqiang.github.io//post-images/1569315793106.jpg)\r\n\r\n\r\n\r\n把源文件复制到分支项目,再打开Git Bash 提交代码\r\n![](https://ouluqiang.github.io//post-images/1569311872576.jpg)\r\n\r\n\r\n```\r\n# 添加当前目录的所有文件到暂存区\r\n$ git add .\r\n\r\n# 提交暂存区到仓库区\r\n$ git commit -m ‘修改说明，随便写’\r\n\r\n# 提交到远程仓库\r\ngit push\r\n```\r\n\r\n提交成功\r\n![](https://ouluqiang.github.io//post-images/1569311915447.jpg)\r\n\r\n有一个问题就是提交完会导致token失效",
      "data": {
        "title": "Gridea保存源文件",
        "date": "2019-09-24 15:55:55",
        "tags": [],
        "published": true,
        "hideInList": false,
        "feature": null
      },
      "isEmpty": false,
      "excerpt": "",
      "abstract": "",
      "fileName": "gridea-bao-cun-yuan-wen-jian"
    },
    {
      "content": "Android常用的开发工具\r\n<!-- more -->\r\n\r\n## Android stido，sdk，jdk\r\n[jdk下载地址](https://www.oracle.com/technetwork/java/javase/downloads/index.html)\r\n\r\njdk下载  \r\n```\r\n链接：https://pan.baidu.com/s/1AVshFeP9ZkT05xk_FIINag \r\n提取码：t8ci \r\n```\r\n\r\n\r\n[Android studio sdk 下载地址](http://www.android-studio.org/index.php)\r\n\r\n## svn,git下载地址\r\n[git下载](https://git-scm.com/downloads)\r\n\r\n```\r\n链接：https://pan.baidu.com/s/1C6hn1S-hBzdduEoIm7-4XA \r\n提取码：xktl \r\n```\r\n\r\n## 抓包工具charles学习版\r\n```\r\n链接：https://pan.baidu.com/s/1aDRIDVu9y66niOZOnPcMDQ \r\n提取码：sj13 \r\n```\r\n\r\n## sqlite数据库工具\r\n```\r\n链接：https://pan.baidu.com/s/1I_w-rARDcKocKBXGOMbJdg \r\n提取码：trl1\r\n```\r\n\r\n## 颜色获取\r\n```\r\n链接：https://pan.baidu.com/s/1-sLi9-PVYksCiE-RHSXquw \r\n提取码：tyrw \r\n```\r\n\r\n## 获取SHA1值\r\n```\r\n链接：https://pan.baidu.com/s/15AvGDv-WjzU7jvLhJeLvhg \r\n提取码：081p \r\n```\r\n\r\n\r\n# idea 学习版\r\nhttp://idea.toocruel.net",
      "data": {
        "title": "常用开发工具",
        "date": "2019-09-24 13:22:26",
        "tags": [
          "工具"
        ],
        "published": true,
        "hideInList": false,
        "feature": null
      },
      "isEmpty": false,
      "excerpt": "",
      "abstract": "Android常用的开发工具\r",
      "fileName": "chang-yong-kai-fa-gong-ju"
    },
    {
      "content": "charles基本设置使用\r\n\r\n<!-- more -->\r\n\r\n\r\n## 抓包工具charles学习版\r\n```\r\n链接：https://pan.baidu.com/s/1aDRIDVu9y66niOZOnPcMDQ \r\n提取码：sj13 \r\n```\r\n\r\n## http抓包\r\n代理 > 代理设置中设置端口号 8888 ,勾选启用HTTP代理\r\n![代理设置](https://ouluqiang.github.io//post-images/1569304039210.jpg)\r\n\r\n![端口](https://ouluqiang.github.io//post-images/1569303949066.jpg)\r\n\r\n帮助 > 本地ip 查看电脑ip\r\n![帮助](https://ouluqiang.github.io//post-images/1569304145156.jpg)\r\n\r\n![ip](https://ouluqiang.github.io//post-images/1569304186481.jpg)\r\n\r\n手机和电脑在一个网段(连接同一个路由器)，在手机网络设置里面填写代理服务地址信息\r\n电脑ip ,  端口号\r\n\r\n![代理](https://ouluqiang.github.io//post-images/1569304740083.jpg)\r\n\r\n在使用手机进行网络请求时，charles会有一个提示，允许即可\r\n\r\n## https抓包\r\nhttps需要安装证书，注意电脑安装证书需要安装到受信任的颁发机构\r\n\r\n![证书](https://ouluqiang.github.io//post-images/1569305139356.jpg)\r\n\r\n![安装证书](https://ouluqiang.github.io//post-images/1569305350226.jpg)\r\n\r\n手机也需要安装证书，在浏览器下载证书,如果不识别，不能安装，建议用谷歌浏览器app下载安装\r\n```\r\nchls.pro/ssl\r\n```\r\n![手机证书](https://ouluqiang.github.io//post-images/1569305456616.jpg)\r\n\r\n勾选Windows代理，打开ssl代理设置\r\n![ssl设置](https://ouluqiang.github.io//post-images/1569305597175.jpg)\r\n\r\n添加主机和端口号， 主机用*，端口号443抓取https，也可以用*\r\n![](https://ouluqiang.github.io//post-images/1569305786428.jpg)\r\n\r\n## Android 7.0抓https失败的解决方案\r\n\r\n新建network_security_config.xml文件\r\n![network_security_config](https://ouluqiang.github.io//post-images/1569302838764.png)\r\n\r\n在network_security_config.xml文件写入以下代码\r\n\r\n```\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<network-security-config>\r\n    <base-config cleartextTrafficPermitted=\"true\">\r\n        <trust-anchors>\r\n            <certificates src=\"system\" overridePins=\"true\" />\r\n            <certificates src=\"user\" overridePins=\"true\" />\r\n        </trust-anchors>\r\n    </base-config>\r\n</network-security-config>\r\n```\r\n\r\n在AndroidManifest.xml添加配置  \r\n\r\n![networkSecurityConfig](https://ouluqiang.github.io//post-images/1569302899586.png)\r\n\r\n\r\n```\r\nandroid:networkSecurityConfig=\"@xml/network_security_config\"\r\n```",
      "data": {
        "title": "charles使用",
        "date": "2019-09-23 18:38:43",
        "tags": [
          "工具",
          "Charles"
        ],
        "published": true,
        "hideInList": false,
        "feature": null
      },
      "isEmpty": false,
      "excerpt": "",
      "abstract": "charles基本设置使用\r",
      "fileName": "charles-shi-yong"
    },
    {
      "content": "一些常用正则表达式 \r\n\r\n<!-- more -->\r\n\r\n## 搜索中文\r\n```\r\n^((?!(\\*|//)).)+[\\u4e00-\\u9fa5]\r\n```\r\n\r\n## 验证密码首位为字母或数字\r\n```\r\n[0-9 a-z A-Z]\\w*\r\n```\r\n\r\n## 验证Email\r\n```\r\n\\w+@\\w+\\.[a-z]+(\\.[a-z]+)?\r\n```\r\n\r\n## 验证身份证号码\r\n```\r\n(^\\d{15}$)|(^\\d{18}$)|(^\\d{17}(\\d|X|x)$)\r\n```\r\n\r\n## 验证手机号码\r\n```\r\n(\\+\\d+)?1[3456789]\\d{9}$\r\n```\r\n\r\n## 验证固定电话号码\r\n```\r\n(\\+\\d+)?(\\d{3,4}\\-?)?\\d{7,8}$\r\n```\r\n\r\n## 验证整数（正整数和负整数）\r\n```\r\n\\-?[1-9]\\d+\r\n```\r\n\r\n## 验证整数和浮点数（正负整数和正负浮点数）\r\n```\r\n\\-?[1-9]\\d+(\\.\\d+)?\r\n```\r\n\r\n## 验证空白字符\r\n```\r\n\\\\s+\r\n```\r\n\r\n## 验证中文\r\n```\r\n^[\\u4E00-\\u9FA5]+$\r\n```\r\n\r\n## 验证日期（年月日）\r\n```\r\n[1-9]{4}([-./])\\d{1,2}\\1\\d{1,2}\r\n```\r\n\r\n## 验证URL地址\r\n```\r\n(https?://(w{3}\\.)?)?\\w+\\.\\w+(\\.[a-zA-Z]+)*(:\\d{1,5})?(/\\w*)*(\\??(.+=.*)?(&.+=.*)?)?\r\n```\r\n\r\n## 获取网址 URL 的一级域名\r\n```\r\n(?<=http://|\\.)[^.]*?\\.(com|cn|net|org|biz|info|cc|tv)\r\n```\r\n\r\n## 匹配中国邮政编码\r\n```\r\n[1-9]\\d{5}\r\n```\r\n\r\n## 匹配IP地址(简单匹配，格式，如：192.168.1.1，127.0.0.1，没有匹配IP段的大小)\r\n```\r\n[1-9](\\d{1,2})?\\.(0|([1-9](\\d{1,2})?))\\.(0|([1-9](\\d{1,2})?))\\.(0|([1-9](\\d{1,2})?))\r\n```\r\n\r\n",
      "data": {
        "title": "正则表达式",
        "date": "2019-09-23 18:29:08",
        "tags": [],
        "published": true,
        "hideInList": false,
        "feature": null
      },
      "isEmpty": false,
      "excerpt": "",
      "abstract": "一些常用正则表达式 \r",
      "fileName": "zheng-ze-biao-da-shi"
    },
    {
      "content": "写博客的工具与GitHub的基本配置\n\n<!-- more -->\n\n## 创建github 博客项目\n\n创建一个repo，名称为 yourname.github.io, 其中yourname是你的github名称，按照这个规则创建才有用哦，如下：\n\n![创建项目](https://ouluqiang.github.io//post-images/1569307197693.jpg)\n\n\nxxx.github.io  xxx必须是你的用户名，创建项目，我的已经存在了\n\n![](https://ouluqiang.github.io//post-images/1569307241793.jpg)\n\n\n\n\n## [创建一个 Token](https://github.com/settings/tokens/new)\n\n只勾选repo即可，防止token泄漏\n\n![](https://ouluqiang.github.io//post-images/1569307352985.png)\n\n拿到token填写到gridea的基础配置token里\n\n![](https://ouluqiang.github.io//post-images/1569307358531.png)\n\n![](https://ouluqiang.github.io//post-images/1569307416363.png)\n\n检测远程连接成功就可以了，如果确定都填对了，就关闭gridea软件再打开软件检测远程连接\n\n## [创建一个 OAuth](https://github.com/settings/applications/new)\n\n![](https://ouluqiang.github.io//post-images/1569307480431.png)\n\n填写到Gridea的配置评论栏中\n\n![](https://ouluqiang.github.io//post-images/1569307505346.png)\n\n![](https://ouluqiang.github.io//post-images/1569307563455.png)\n\n\n再博客中测试评论，成功即可",
      "data": {
        "title": "Gridea，GitHub配置使用",
        "date": "2019-09-18 18:17:55",
        "tags": [
          "blog"
        ],
        "published": true,
        "hideInList": false,
        "feature": null
      },
      "isEmpty": false,
      "excerpt": "",
      "abstract": "写博客的工具与GitHub的基本配置",
      "fileName": "grideagithub-pei-zhi-shi-yong"
    },
    {
      "content": "## 连接手机和电脑\n命令行 adb devices 查看连接\n\n![连接](https://ouluqiang.github.io//post-images/1568884026016.png)\n\n   \n## 设置5555端口\n设置wifi调试端口 5555\n```\n    adb tcpip 5555\n```\n\n![端口](https://ouluqiang.github.io//post-images/1568886196625.png)\n\n  \n## 查看手机ip\n```\n    adb shell  ifconfig wlan0\n```\n\n![ip](https://ouluqiang.github.io//post-images/1568886240609.png)\n\n \n手机操作，打开 设置-WLAN-配置 页面，可看到当前 IP\n\n![ip](https://ouluqiang.github.io//post-images/1568886275147.png)\n\n\n## 连接手机 \n```\n    adb connect <手机ip地址>\n```\n\n![连接](https://ouluqiang.github.io//post-images/1568886318164.png)\n\n\n\n## 成功\n连接成功显示\n\n![成功](https://ouluqiang.github.io//post-images/1568886341285.png)\n\n    \n 锤子手机测试失败",
      "data": {
        "title": "adb wifi 调试",
        "date": "2019-09-18 16:48:35",
        "tags": [],
        "published": true,
        "hideInList": false,
        "feature": null
      },
      "isEmpty": false,
      "excerpt": "",
      "abstract": "",
      "fileName": "adb-wifi-diao-shi"
    },
    {
      "content": "## 新建代码库\n```\n# 在当前目录新建一个Git代码库\n$ git init\n\n# 新建一个目录，将其初始化为Git代码库\n$ git init [project-name]\n\n# 下载一个项目和它的整个代码历史\n$ git clone [url]\n```\n\n## 配置\n```\n# 显示当前的Git配置\n$ git config --list\n\n# 编辑Git配置文件\n$ git config -e [--global]\n\n# 设置提交代码时的用户信息\n$ git config [--global] user.name \"[name]\"\n$ git config [--global] user.email \"[email address]\"\n```\n\n## 增加/删除文件\n```\n# 添加指定文件到暂存区\n$ git add [file1] [file2] ...\n\n# 添加指定目录到暂存区，包括子目录\n$ git add [dir]\n\n# 添加当前目录的所有文件到暂存区\n$ git add .\n\n# 添加每个变化前，都会要求确认\n# 对于同一个文件的多处变化，可以实现分次提交\n$ git add -p\n\n# 删除工作区文件，并且将这次删除放入暂存区\n$ git rm [file1] [file2] ...\n\n# 停止追踪指定文件，但该文件会保留在工作区\n$ git rm --cached [file]\n\n# 改名文件，并且将这个改名放入暂存区\n$ git mv [file-original] [file-renamed]\n```\n\n## 代码提交\n```\n# 提交暂存区到仓库区\n$ git commit -m [message]\n\n# 提交暂存区的指定文件到仓库区\n$ git commit [file1] [file2] ... -m [message]\n\n# 提交工作区自上次commit之后的变化，直接到仓库区\n$ git commit -a\n\n# 提交时显示所有diff信息\n$ git commit -v\n\n# 使用一次新的commit，替代上一次提交\n# 如果代码没有任何新变化，则用来改写上一次commit的提交信息\n$ git commit --amend -m [message]\n\n# 重做上一次commit，并包括指定文件的新变化\n$ git commit --amend [file1] [file2] ...\n```\n\n## 分支\n```\n# 列出所有本地分支\n$ git branch\n\n# 列出所有远程分支\n$ git branch -r\n\n# 列出所有本地分支和远程分支\n$ git branch -a\n\n# 新建一个分支，但依然停留在当前分支\n$ git branch [branch-name]\n\n# 新建一个分支，并切换到该分支\n$ git checkout -b [branch]\n\n# 新建一个分支，指向指定commit\n$ git branch [branch] [commit]\n\n# 新建一个分支，与指定的远程分支建立追踪关系\n$ git branch --track [branch] [remote-branch]\n\n# 切换到指定分支，并更新工作区\n$ git checkout [branch-name]\n\n# 切换到上一个分支\n$ git checkout -\n\n# 建立追踪关系，在现有分支与指定的远程分支之间\n$ git branch --set-upstream [branch] [remote-branch]\n\n# 合并指定分支到当前分支\n$ git merge [branch]\n\n# 选择一个commit，合并进当前分支\n$ git cherry-pick [commit]\n\n# 删除分支\n$ git branch -d [branch-name]\n\n# 删除远程分支\n$ git push origin --delete [branch-name]\n$ git branch -dr [remote/branch]\n```\n\n## 标签\n```\n# 列出所有tag\n$ git tag\n\n# 新建一个tag在当前commit\n$ git tag [tag]\n\n# 新建一个tag在指定commit\n$ git tag [tag] [commit]\n\n# 删除本地tag\n$ git tag -d [tag]\n\n# 删除远程tag\n$ git push origin :refs/tags/[tagName]\n\n# 查看tag信息\n$ git show [tag]\n\n# 提交指定tag\n$ git push [remote] [tag]\n\n# 提交所有tag\n$ git push [remote] --tags\n\n# 新建一个分支，指向某个tag\n$ git checkout -b [branch] [tag]\n```\n\n## 查看信息\n```\n# 显示有变更的文件\n$ git status\n\n# 显示当前分支的版本历史\n$ git log\n\n# 显示commit历史，以及每次commit发生变更的文件\n$ git log --stat\n\n# 搜索提交历史，根据关键词\n$ git log -S [keyword]\n\n# 显示某个commit之后的所有变动，每个commit占据一行\n$ git log [tag] HEAD --pretty=format:%s\n\n# 显示某个commit之后的所有变动，其\"提交说明\"必须符合搜索条件\n$ git log [tag] HEAD --grep feature\n\n# 显示某个文件的版本历史，包括文件改名\n$ git log --follow [file]\n$ git whatchanged [file]\n\n# 显示指定文件相关的每一次diff\n$ git log -p [file]\n\n# 显示过去5次提交\n$ git log -5 --pretty --oneline\n\n# 显示所有提交过的用户，按提交次数排序\n$ git shortlog -sn\n\n# 显示指定文件是什么人在什么时间修改过\n$ git blame [file]\n\n# 显示暂存区和工作区的代码差异\n$ git diff\n\n# 显示暂存区和上一个commit的差异\n$ git diff --cached [file]\n\n# 显示工作区与当前分支最新commit之间的差异\n$ git diff HEAD\n\n# 显示两次提交之间的差异\n$ git diff [first-branch]...[second-branch]\n\n# 显示今天你写了多少行代码\n$ git diff --shortstat \"@{0 day ago}\"\n\n# 显示某次提交的元数据和内容变化\n$ git show [commit]\n\n# 显示某次提交发生变化的文件\n$ git show --name-only [commit]\n\n# 显示某次提交时，某个文件的内容\n$ git show [commit]:[filename]\n\n# 显示当前分支的最近几次提交\n$ git reflog\n\n# 从本地master拉取代码更新当前分支：branch 一般为master\n$ git rebase [branch]\n```\n\n## 远程同步\n```\n# 下载远程仓库的所有变动\n$ git fetch [remote]\n\n# 显示所有远程仓库\n$ git remote -v\n\n# 显示某个远程仓库的信息\n$ git remote show [remote]\n\n# 增加一个新的远程仓库，并命名\n$ git remote add [shortname] [url]\n\n# 取回远程仓库的变化，并与本地分支合并\n$ git pull [remote] [branch]\n\n# 上传本地指定分支到远程仓库\n$ git push [remote] [branch]\n\n# 强行推送当前分支到远程仓库，即使有冲突\n$ git push [remote] --force\n\n# 推送所有分支到远程仓库\n$ git push [remote] --all\n```\n\n## 撤销\n```\n# 恢复暂存区的指定文件到工作区\n$ git checkout [file]\n\n# 恢复某个commit的指定文件到暂存区和工作区\n$ git checkout [commit] [file]\n\n# 恢复暂存区的所有文件到工作区\n$ git checkout .\n\n# 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变\n$ git reset [file]\n\n# 重置暂存区与工作区，与上一次commit保持一致\n$ git reset --hard\n\n# 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变\n$ git reset [commit]\n\n# 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致\n$ git reset --hard [commit]\n\n# 重置当前HEAD为指定commit，但保持暂存区和工作区不变\n$ git reset --keep [commit]\n\n# 新建一个commit，用来撤销指定commit\n# 后者的所有变化都将被前者抵消，并且应用到当前分支\n$ git revert [commit]\n\n# 暂时将未提交的变化移除，稍后再移入\n$ git stash\n$ git stash pop\n```\n\n## 其他\n```\n# 生成一个可供发布的压缩包\n$ git archive\n```",
      "data": {
        "title": "git命令",
        "date": "2019-09-18 16:28:33",
        "tags": [],
        "published": true,
        "hideInList": false,
        "feature": null
      },
      "isEmpty": false,
      "excerpt": "",
      "abstract": "",
      "fileName": "git-ming-ling"
    },
    {
      "content": "[简明版教程](http://note.youdao.com/iyoudao/?p=2411)  \n[进阶版教程](http://note.youdao.com/iyoudao/?p=2445)\n## 标题  \n\n**标题，只需要在这段文字前面加上 #，再在 # 后加一个空格  \n增加一个 # ，标题字号相应降低一级**\n![标题](https://ouluqiang.github.io//post-images/1569307892987.png)\n\n```\n# 一级标题\n## 二级标题\n### 三级标题\n#### 四级标题\n```\n![标题效果](https://ouluqiang.github.io//post-images/1569307931761.png)\n\n## 列表  \n\n### 无序列表  \n\n**你只需要在文字前面加上 - 就可以了；如果你希望是有序列表，在文字前面加上 1. 2. 3. 即可。**\n![无序列表](https://ouluqiang.github.io//post-images/1569307967486.png)\n\n\n```\n- 列表1\n  - 列表1.1\n  - 列表1.2\n- 列表2\n- 列表3\n```\n\n- 列表1\n  - 列表1.1\n  - 列表1.2\n- 列表2\n- 列表3\n\n\n### 有序列表\n\n![有序列表](https://ouluqiang.github.io//post-images/1569308007512.png)\n\n\n```\n1. 列表1\n    1. 列表1.1\n    2. 列表1.2\n2. 列表2\n3. 列表3\n```\n\n1. 列表1\n    1. 列表1.1\n    2. 列表1.2\n2. 列表2\n3. 列表3\n\n\n\n## 引用\n**如果你需要在文稿中引用一段别处的句子，那么就要用到「引用」格式。  \n在引用文字前加上 > 并与文字保留一个字符的空格**\n\n![引用](https://ouluqiang.github.io//post-images/1569308041174.png)\n\n```\n\t> 记录，成为更好的自己。--有道云笔记 \n```\n\n> 记录，成为更好的自己。--有道云笔记 \n\n\n\n\n## 粗体和斜体\n\n**用两个 * 包含一段文本就是粗体的语法；**    \n**用一个 * 包含一段文本就是斜体的语法。**  \n***注意：字符与文本之间无须空格***\n\n![斜体](https://ouluqiang.github.io//post-images/1569308084185.png)\n\n```\n*这是斜体*\n```\n\n*这是斜体*\n\n![粗体](https://ouluqiang.github.io//post-images/1569308112324.png)\n\n```\n**这是粗体**\n```\n\n**这是粗体**\n\n\n## 链接与图片\n\n**链接：在 Markdown 中，插入链接只需要使用 [显示文本] (链接地址) 即可。**  \n**图片：在 Markdown 中，插入图片只需要使用 ![显示文本] (图片链接地址)即可。**  \n***注：插入图片的语法和链接的语法很像，只是前面多了一个！***  \n\n![链接](https://ouluqiang.github.io//post-images/1569308139421.png)\n\n```\n[链接](https://ouluqiang.github.io)\n```\n\n[链接](https://ouluqiang.github.io)\n\n![图片](https://ouluqiang.github.io//post-images/1569308339148.png)\n\n```\n![图片连接演示](https://ouluqiang.github.io//images/avatar.png?v=1569307577738)\n```\n\n![图片连接演示](https://ouluqiang.github.io//images/avatar.png?v=1569307577738)\n\n\n## 分割线\n\n**只需要另起一行，连续输入三个星号** ***  **即可分割两段文字内容。**\n\n```\n\t第一段\n\t***\n\t第二段\n\n\t第一段\n\t---\n\t第二段\n```\n\n第一段\n***\n第二段\n\n第一段\n---\n第二段\n\n\n\n\n## 代码高亮\n\n![代码高亮](https://ouluqiang.github.io//post-images/1569308458877.png)\n\n![代码高亮代码](https://ouluqiang.github.io//post-images/1569308483292.png)\n\n```\n代码高亮\n```\n\n## 制作待办事项To-do List\n你只需要在待办的事项文本或者清单文本前加上- [ ]、- [x]即可。\n\n**- [] 表示未完成，- [x] 表示已完成。**\n\n***注：键入字符与字符之间都要保留一个字符的空格。***\n\n![已完成](https://ouluqiang.github.io//post-images/1569308519075.png)\n\n```\n- [x] 已完成\n  - [x] 已完成\n  - [x] 已完成  \n```\n\n- [x] 已完成\n  - [x] 已完成\n  - [x] 已完成  \n\n![未完成](https://ouluqiang.github.io//post-images/1569308546303.png)\n\n```\n- [ ] 未完成\n- [ ] 未完成\n```\n\n- [ ] 未完成\n- [ ] 未完成\n\n## 高效绘制 流程图、序列图、甘特图、表格\n### 流程图\n书写graph XX，用以确定将要绘制的流程图及其类型（XX表示流程图类型）。\n流程图分为竖向和横向两大类，竖向包括自上而下和自下而上两种顺序，横向包括从右到左和从左到右两种顺序。  \n其对应语法分别为：graph TB/graph BT/graph RL/graph LR。\n\nTB - top bottom（自上而下）  \nBT - bottom top（自下而上）  \nRL - right left（从右到左）  \nLR - left right（从左到右）  \n\n![流程图](https://ouluqiang.github.io//post-images/1569308580136.png)\n\n![流程图效果](https://ouluqiang.github.io//post-images/1569308601497.png)\n\n\n\n```\ngraph TD\nA[直角四边形]---B{菱形}\nB --> C((圆形))\nC --> D\nC --> E\nC -->|插入文本|F\n```\n\n### 序列图\n\n![序列图](https://ouluqiang.github.io//post-images/1569308625091.png)\n\n![序列图效果](https://ouluqiang.github.io//post-images/1569308658344.png)\n\n\n```\nsequenceDiagram\nloop every day\n    A->>B: How are you?\n\n    B->>A: Great!\nend\n```\n\n### 甘特图\n书写 gantt ，用以确定将要绘制的是甘特图。\ndateFormat YYYY-MM-DD规定了时间轴，title （标题文本）表示甘特图标题。\n需键入section，空一个字符，再输入项目名称的文本（一个section和另一个section之间要空行）。\n\n![甘特图](https://ouluqiang.github.io//post-images/1569308684380.png)\n\n![甘特图效果](https://ouluqiang.github.io//post-images/1569308707886.png)\n\n\n```\ngantt\ndateFormat YYYY-MM-DD\ntitle 产品计划书\nsection 初期阶段\n明确需求: 2018-07-01, 9d\nsection 中期阶段\n跟进开发: 2018-07-11, 9d\nsection 后期阶段\n走查测试: 2018-07-22, 9d\n```\n\n### 表格\n\n![表格](https://ouluqiang.github.io//post-images/1569308736274.png)\n\n\n```\n    header 1    | header 2    | 第三\n    ---         |---          | ---\n    row 1 col 1 | row 1 col 2 | 第三个 \n    row 2 col 1 | row 2 col 2 | 第三个\n```\n\nheader 1    | header 2    | 第三\n---         |---          | ---\nrow 1 col 1 | row 1 col 2 | 第三个 \nrow 2 col 1 | row 2 col 2 | 第三个\n\n\n## 书写数学公式\n\n![公式](https://ouluqiang.github.io//post-images/1569308765985.png)\n\n![公式图](https://ouluqiang.github.io//post-images/1569308783976.png)\n\n```math\nE = mc^2\n```\n\n\n\n",
      "data": {
        "title": "markdown编辑器教程",
        "date": "2019-08-09 17:51:21",
        "tags": [
          "Blog",
          "markdown"
        ],
        "published": true,
        "hideInList": false,
        "feature": "/post-images/markdown-bian-ji-qi-jiao-cheng.jpg"
      },
      "isEmpty": false,
      "excerpt": "",
      "abstract": "",
      "fileName": "markdown-bian-ji-qi-jiao-cheng"
    },
    {
      "content": "这是关于的页面，可以在这里向世界介绍你！\n",
      "data": {
        "title": "关于",
        "date": "2019-01-25 19:09:48",
        "tags": null,
        "published": true,
        "hideInList": true,
        "feature": null
      },
      "isEmpty": false,
      "excerpt": "",
      "abstract": "",
      "fileName": "about"
    },
    {
      "content": "👏  欢迎使用 **Gridea** ！  \n✍️  **Gridea** 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ... \n\n<!-- more -->\n\n[Github](https://github.com/getgridea/gridea)  \n[Gridea 主页](http://hvenotes.fehey.com/)  \n[示例网站](http://fehey.com/)\n\n## 特性👇\n📝  你可以使用最酷的 **Markdown** 语法，进行快速创作  \n\n🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片  \n\n🏷️  你可以对文章进行标签分组  \n\n📋  你可以自定义菜单，甚至可以创建外部链接菜单  \n\n💻  你可以在 **𝖶𝗂𝗇𝖽𝗈𝗐𝗌** 或 **𝖬𝖺𝖼𝖮𝖲** 设备上使用此客户端  \n\n🌎  你可以使用 **𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌** 或 **Coding Pages** 向世界展示，未来将支持更多平台  \n\n💬  你可以进行简单的配置，接入 [Gitalk](https://github.com/gitalk/gitalk) 或 [DisqusJS](https://github.com/SukkaW/DisqusJS) 评论系统  \n\n🇬🇧  你可以使用**中文简体**或**英语**  \n\n🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力  \n\n🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步  \n\n🌱 当然 **Gridea** 还很年轻，有很多不足，但请相信，它会不停向前🏃\n\n未来，它一定会成为你离不开的伙伴\n\n尽情发挥你的才华吧！\n\n😘 Enjoy~\n",
      "data": {
        "title": "Hello Gridea",
        "date": "2018-12-12 00:00:00",
        "tags": [
          "Gridea"
        ],
        "published": true,
        "hideInList": false,
        "feature": "/post-images/hello-gridea.png"
      },
      "isEmpty": false,
      "excerpt": "",
      "abstract": "👏  欢迎使用 **Gridea** ！  \n✍️  **Gridea** 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ... ",
      "fileName": "hello-gridea"
    }
  ],
  "tags": [
    {
      "index": -1,
      "name": "Android",
      "slug": "uPl9IEkHz",
      "used": true
    },
    {
      "name": "gson",
      "slug": "13AEsKm6N",
      "used": true
    },
    {
      "name": "markdown",
      "slug": "EYP-kC9od",
      "used": true
    },
    {
      "name": "blog",
      "slug": "FO3QcY1pj",
      "used": true
    },
    {
      "name": "Charles",
      "slug": "QXrdbuOAc",
      "used": true
    },
    {
      "name": "工具",
      "slug": "7Y0nywv1q",
      "used": true
    },
    {
      "index": -1,
      "name": "Blog",
      "slug": "wowhDkgzJ",
      "used": true
    },
    {
      "name": "Gridea",
      "slug": "ea4LAVIav",
      "used": true
    },
    {
      "name": "github",
      "slug": "TMR7yPO8w",
      "used": false
    },
    {
      "name": "代码管理",
      "slug": "SbXoMJ1qwn",
      "used": false
    }
  ],
  "menus": [
    {
      "link": "/",
      "name": "首页",
      "openType": "Internal"
    },
    {
      "link": "/archives",
      "name": "归档",
      "openType": "Internal"
    },
    {
      "link": "/tags",
      "name": "标签",
      "openType": "Internal"
    },
    {
      "link": "/post/about",
      "name": "关于",
      "openType": "Internal"
    }
  ]
}